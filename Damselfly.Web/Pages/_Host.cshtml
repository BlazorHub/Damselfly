@page "/"
@namespace Damselfly.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!-- TODO: Clean up these dependencies once we've decided what we actually need. -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Damselfly - Digital Asset Management</title>
    <base href="~/" />
    <link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />
    <link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
    <link rel="stylesheet" href="_content/BlazorDateRangePicker/daterangepicker.min.css" />
    <link rel="stylesheet" href="font-awesome/css/all.min.css" />
    <link rel="stylesheet" href="Cropper/cropper.css" />
    <link href="_content/Radzen.Blazor/css/default.css" rel="stylesheet">
    <link href="css/DarkDateRangePicker.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        @(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered))
    </app>

    <script>
        window.InfiniteScroll =
        {
            Init: function (scrollAreaID, endMarkerId, DotNetRef, initialScrollPos)
            {
                var scrollArea = document.getElementById(scrollAreaID);
                scrollArea.scrollTop = initialScrollPos;

                var markerIsVisible = function () {
                    var endMarker = document.getElementById(endMarkerId);

                    if (endMarker === null)
                        return false;

                    var bounding = endMarker.getBoundingClientRect();

                    return (bounding.top >= 0 && bounding.left >= 0 &&
                        bounding.right <= (window.innerWidth || document.documentElement.clientWidth) &&
                        bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight));
                }

                var markerVisibleState = null;

                scrollArea.addEventListener('scroll', function ()
                {
                    DotNetRef.invokeMethodAsync("HandleScroll", scrollArea.scrollTop);

                    var visible = markerIsVisible();

                    if (markerVisibleState != visible )
                    {
                        markerVisibleState = visible;
                        if (visible)
                            DotNetRef.invokeMethodAsync("LoadMoreData");
                    }
                });
            }
        }

        window.setSelection = (element, start, end) => {
            return element.setSelectionRange( start, end );
        }

        function writeFileLocally(sourceUrl, localFilename) {
            window.downloadUrl(sourceUrl, localFilename);
        }

        function downloadFile(filename) {
            location.href = filename;
        }

        function doImageCrop(elementId, DotNetRef) {
            var image = document.getElementById(elementId);
            new Cropper(image, {
                update: function (coords) {
                    DotNetRef.invokeMethodAsync("CompleteCrop", { top: coords.y, left: coords.x, width: coords.width, height: coords.height });
                }
            });
        }

        function getDesktopVersion() {
            return window.desktopVersion;
        }

        function checkDesktopUpgrade(desktopVersion, cb) {
            try {
                DotNet.invokeMethodAsync('Damselfly.Web', 'GetUpgradeVersion', desktopVersion).then(upgradeVersion => {
                    if (upgradeVersion !== '') {
                        cb(upgradeVersion);
                    }
                })
            } catch (err) {
                console.log("Error: " + err);
            }
        }


        function imageZoom(imgID, resultID, srcUrl) {
            var img, lens, result, scale;
            img = document.getElementById(imgID);
            result = document.getElementById(resultID);
            /* Create lens: */
            lens = document.createElement("DIV");
            lens.setAttribute("class", "img-zoom-lens");
            /* Insert lens: */
            img.parentNode.insertBefore(lens, img);

            /* Calculate the ratio between result DIV and lens: */
            scale = result.offsetWidth / lens.offsetWidth;
            /* Set background properties for the result DIV */
            result.style.backgroundImage = "url('" + srcUrl + "')";
            result.style.backgroundSize = (img.width * scale) + "px " + (img.height * scale) + "px";
            /* Execute a function when someone moves the cursor over the image, or the lens: */
            lens.addEventListener("mousemove", moveLens);
            img.addEventListener("mousemove", moveLens);
            /* And also for touch screens: */
            lens.addEventListener("touchmove", moveLens);
            img.addEventListener("touchmove", moveLens);
            function moveLens(e) {
                var pos, x, y;
                /* Prevent any other actions that may occur when moving over the image */
                e.preventDefault();
                /* Get the cursor's x and y positions: */
                pos = getCursorPos(e);
                /* Calculate the position of the lens: */
                x = pos.x - (lens.offsetWidth / 2);
                y = pos.y - (lens.offsetHeight / 2);
                /* Prevent the lens from being positioned outside the image: */
                if (x > img.width - lens.offsetWidth) { x = img.width - lens.offsetWidth; }
                if (x < 0) { x = 0; }
                if (y > img.height - lens.offsetHeight) { y = img.height - lens.offsetHeight; }
                if (y < 0) { y = 0; }
                /* Set the position of the lens: */
                lens.style.left = x + "px";
                lens.style.top = y + "px";
                /* Display what the lens "sees": */
                result.style.backgroundPosition = "-" + (x * scale) + "px -" + (y * scale) + "px";
            }
            function getCursorPos(e) {
                var a, x = 0, y = 0;
                e = e || window.event;
                /* Get the x and y positions of the image: */
                a = img.getBoundingClientRect();
                /* Calculate the cursor's x and y coordinates, relative to the image: */
                x = e.pageX - a.left;
                y = e.pageY - a.top;
                /* Consider any page scrolling: */
                x = x - window.pageXOffset;
                y = y - window.pageYOffset;
                return { x: x, y: y };
            }
        }
        /* END EXTERNAL SOURCE */
        /* BEGIN EXTERNAL SOURCE */</script>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Blazored.Typeahead/blazored-typeahead.js"></script>
    <script src="_content/BlazorDateRangePicker/clickAndPositionHandler.js"></script>
    <script src="Cropper/cropper.min.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
</body>
</html>
