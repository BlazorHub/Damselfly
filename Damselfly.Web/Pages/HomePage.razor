@page "/"

@using Damselfly.Web.Data
@using Damselfly.Core.Services;
@using Damselfly.Web.Shared.Images;

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject ViewDataService ViewDataService
@inject NavigationService navContext
@inject SearchService searchService
@inject UserStatusService statusService
@inject NavigationManager navigationManager
 
<div class="damselfly-imagebrowser">
    <ErrorBoundary>
        <SearchBar />
    </ErrorBoundary>
    <ErrorBoundary>
        <ImageGrid />
    </ErrorBoundary>
</div>

@code
{
    [QueryStringParameter]
    public int FolderId { get; set; }

    [QueryStringParameter]
    public int TagId { get; set; }

    [QueryStringParameter]
    public int PersonId { get; set; }

    [QueryStringParameter]
    public DateTime Date { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if( FolderId != 0 )
        {
            var folder = await ImageService.GetFolderAsync(FolderId);

            if (folder != null)
            {
                statusService.StatusText = $"Selected folder {folder.Name}";
                searchService.Folder = folder;
            }
        }

        if( TagId != 0 )
        {
            searchService.TagId = TagId;
        }

        if( Date != DateTime.MinValue )
        {
            // searchService.MinDate 
        }

        // Don't need this yet
        //this.UpdateQueryString(navigationManager);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(navigationManager);

        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        navContext.CurrentImage = null;

        ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowFolderList = true, ShowBasket = true, ShowTags = true });
    }

    // TODO: Don't think we need this
    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public void GetUpdateState(string clientVersion)
    {
        Logging.Log($"Checking for update: {clientVersion}");

    } }