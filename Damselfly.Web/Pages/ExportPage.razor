@page "/export"

@inject BasketService basketService
@inject ViewDataService ViewDataService
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager  

@using Damselfly.Core.ImageProcessing


<div class="damselfly-export">
    <div>
        <div class="damselfly-imagenavitem">
            <a href="/"><i class="clickable-icon fa fa-reply" /></a>
            <h4 class="image-title">
                Export Images
            </h4>
        </div>
    </div>
    <div class="damselfly-exportlist">
        @if (images != null)
        {
            @foreach (var img in images)
            {
                <div class="damselfly-exportitem">
                    <div>
                        <img title="@img.Image.FileName" src="@img.ThumbURL" style="max-width:100px;">
                    </div>
                    <div>
                        @img.Image.FileName
                    </div>
                    <div>
                        @img.Image.Folder.Name
                    </div>
                </div>

            }
        }
        else
        {
            <p>Loading selection...</p>
        }
    </div>
            </div>

@code {
    readonly List<ExportableImage> images = new List<ExportableImage>();


    public Task<List<ExportableImage>> LoadData()
    {
        var watch = new Stopwatch("ExportLoadData");
        images.Clear();
        images.AddRange(basketService.SelectedImages.Select(x => new ExportableImage(x, ThumbSize.Small)));
        watch.Stop();

        return Task.FromResult(images);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.ShowFolderList = false;
            ViewDataService.ShowBasket = false;
            ViewDataService.ShowExport = true;
            ViewDataService.ShowTags = false;

            await LoadData();

            StateHasChanged();
        }
    }

}
