@page "/image"
@page "/image/{ImageID}"

@using Damselfly.Core.ImageProcessing

@inject ThumbnailService thumbService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ViewDataService ViewDataService
@inject IJSRuntime JsRuntime
@implements ICropHelper

<div class="damselfly-imageview" id="test-container-keydown" style="outline: none;" tabindex="0" @onkeydown="OnKeyDown">
    @if (image == null)
    {
        <div class="col">
            <p><em>Error. Image not found!</em></p>
        </div> }
            else
            {
                <div class="damselfly-imagetitlebar">
                    <div class="damselfly-imagenavitem">
                        <a href="/"><i class="clickable-icon fa fa-reply" /></a>
                    </div>
                    <div class="damselfly-imagetitle">
                        Image: @image.FileName
                    </div>
                </div>

                <div class="damselfly-imagenav">
                    @if (prevImage != null && prevImage.ImageId != image.ImageId)
                    {
    <a class="damselfly-navleft chevron flipchevron" href="/image/@prevImage.ImageId" /> }
                    else
                    {
    <div class="damselfly-navleft"></div>}
                    <div class="damselfly-imagedisplay">
                        <img @key="image.ImageId" id="theImage" class="image-fill" src="@ImageService.GetImageThumbUrl(image, ThumbSize.Large)">
                    </div>
                    @if (nextImage != null && nextImage.ImageId != image.ImageId)
                    {
    <a class="damselfly-navright chevron" href="/image/@nextImage.ImageId" /> }
                    else
                    {
    <div class="damselfly-navright"></div>}
                </div>}
</div>

@code {
        [Parameter]
        public string ImageID { get; set; }

        Image image;
        Image nextImage;
        Image prevImage;

    public CropJsHelper JsHelper { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowTags = true });

            //this.JsHelper = new CropJsHelper(this);
            //await JsRuntime.InvokeAsync<string>("doImageCrop", "theImage", DotNetObjectReference.Create(JsHelper));

            await SetUpNavigation();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // TODO - do we need this?
        await SetUpNavigation();
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public void CompleteCrop(CropData cropData)
    {
        Logging.Log($"Crop complete: {cropData.Left}");
    }

    protected async Task SetUpNavigation()
    {
        if (Int32.TryParse(ImageID, out var imageId))
        {
            image = await ImageService.GetImage(imageId);
            navContext.CurrentImage = image;

            nextImage = await navContext.GetNextImageAsync(true);
            prevImage = await navContext.GetNextImageAsync(false);
        }
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight")
        {
            if (nextImage != null && nextImage.ImageId != image.ImageId)
                NavigationManager.NavigateTo("/image/" + nextImage.ImageId);
        }
        else if (e.Key == "ArrowLeft")
        {
            if (prevImage != null && prevImage.ImageId != image.ImageId)
                NavigationManager.NavigateTo("/image/" + prevImage.ImageId);
        }
    } }
