@page "/image"
@page "/image/{ImageID}"

@using Damselfly.Core.ImageProcessing

@inject ThumbnailService thumbService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ViewDataService ViewDataService
@inject IJSRuntime JsRuntime
@implements ICropHelper

<div class="damselfly-imageview" id="test-container-keydown" style="outline: none;" tabindex="0" @onkeydown="OnKeyDown">
    @if (image == null)
    {
    <div class="col">
        <p><em>Error. Image not found!</em></p>
    </div>
}
else
{
    <div class="damselfly-imagetitlebar">
        <div class="damselfly-imagenavitem">
            <NavLink href="/"><i class="clickable-icon fa fa-reply" /></NavLink>
        </div>
        <div class="damselfly-imagetitle">
            Image: @image.FileName
        </div>
    </div>

    <div class="damselfly-imagenav">
        @if (prevImage != null && prevImage.ImageId != image.ImageId)
        {
            <NavLink class="damselfly-navleft chevron flipchevron" href="@PrevImageIDUrl" />
        }
        else
        {
            <div class="damselfly-navleft"></div>
        }
        <ImagePreview ImageID="@ImageID" />
        @if (nextImage != null && nextImage.ImageId != image.ImageId)
        {
            <NavLink class="damselfly-navright chevron" href="@NextImageIDUrl" />
        }
        else
        {
            <div class="damselfly-navright"></div>
        }
        </div>
    }
</div>

@code {
    [Parameter]
    public string ImageID { get; set; }

    Image image;
    Image nextImage;
    Image prevImage;

    public string ImgKey => $"prev{image.ImageId}";
    public string ImgPreviewKey => $"{image.ImageId}";
    public string ImageUrl { get; set; }
    public string ImageUrlHighRes { get; set; }

    public CropJsHelper JsHelper { get; set; }

    private string PrevImageIDUrl => $"/image/{prevImage.ImageId}";
    private string NextImageIDUrl => $"/image/{nextImage.ImageId}";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SetupPreload();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowImageProps = true, ShowTags = true });

            //this.JsHelper = new CropJsHelper(this);
            //await JsRuntime.InvokeAsync<string>("doImageCrop", "theImage", DotNetObjectReference.Create(JsHelper));

            await SetUpNavigation();
        }
    }

    private void SetupPreload()
    {
        ImageUrl = $"/thumb/{ThumbSize.Medium}/{ImageID}";
        ImageUrlHighRes = $"/thumb/{ThumbSize.ExtraLarge}/{ImageID}";
        StateHasChanged();
    }

    protected void ReplaceUrl( ProgressEventArgs args )
    {
        Logging.Log("Replacing Image URL");
        ImageUrl = ImageUrlHighRes;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        SetupPreload();

        // TODO - do we need this?
        await SetUpNavigation();
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public void CompleteCrop(CropData cropData)
    {
        Logging.Log($"Crop complete: {cropData.Left}");
    }

    protected async Task SetUpNavigation()
    {
        if (Int32.TryParse(ImageID, out var imageId))
        {
            image = await ImageService.GetImage(imageId);
            navContext.CurrentImage = image;

            nextImage = await navContext.GetNextImageAsync(true);
            prevImage = await navContext.GetNextImageAsync(false);
        }
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight")
        {
            if (nextImage != null && nextImage.ImageId != image.ImageId)
                NavigationManager.NavigateTo("/image/" + nextImage.ImageId);
        }
        else if (e.Key == "ArrowLeft")
        {
            if (prevImage != null && prevImage.ImageId != image.ImageId)
                NavigationManager.NavigateTo("/image/" + prevImage.ImageId);
        }
    } }
