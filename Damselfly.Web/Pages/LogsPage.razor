@page "/logs"

@inject ViewDataService ViewDataService

<div class="damselfly-logview">
    <div class="log-scroll-area">
        <h4>@LogFileName</h4>
        <div class="log-table">
            <table class="loglist-table">
                <thead>
                    <tr>
                        <th class="timestamp">Timestamp</th>
                        <th class="level">Log Level</th>
                        <th class="entry">Entry</th>
                        <th class="thread">Thread</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@logLines" ItemSize="15">
                        @foreach (var line in logLines)
                        {
                            <tr>
                                <td class="timestamp">@line.date</td>
                                <td class="level log-level-@line.level">@line.level</td>
                                <td class="entry">@line.entry</td>
                                <td class="thread">@line.thread</td>
                            </tr>
                        }
                    </Virtualize>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    class LogEntry
    {
        public string date { get; set; }
        public string level { get; set; }
        public string entry { get; set; }
        public string thread { get; set; }
    }

    List<LogEntry> logLines = new List<LogEntry>();
    private string LogFileName { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowLogs = true });

            var lines = await GetLogLines();
            logLines.AddRange(lines);
            StateHasChanged();
        }
    }

    private Task<LogEntry[]> GetLogLines()
    {
        LogEntry[] result = new LogEntry[0];

        var logDir = new DirectoryInfo(Logging.LogFolder);
        var file = logDir.GetFiles("*.log")
                         .OrderByDescending(x => x.LastWriteTimeUtc)
                         .FirstOrDefault();

        if (file != null)
        {
            LogFileName = file.Name;

            result = File.ReadAllLines(file.FullName)
                         .Reverse()
                         .Select(x => CreateLogEntry(x))
                         .ToArray();
        }

        return Task.FromResult(result);
    }

    // TODO: Use a regex here
    private LogEntry CreateLogEntry(string s)
    {
        var e = new LogEntry();
        if (!string.IsNullOrWhiteSpace(s) && s.StartsWith('['))
        {
            try
            {
                string[] parts = s.Split(']');
                if (parts.Length > 1)
                {
                    e.entry = parts[1];

                    string[] parts2 = parts[0].Substring(1).Split('-');
                    e.date = parts2[0];
                    e.thread = parts2[1];
                    e.level = parts2[2];
                }
            }
            catch (Exception)
            {
                // Don't log - we'll get an infinite loop!
            }
        }

        return e;
    }
}
