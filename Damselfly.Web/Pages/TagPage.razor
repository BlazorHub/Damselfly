@page "/tags"

@using Damselfly.Core.Services;
@using Damselfly.Core.Models;

@inject ThumbnailService thumbService
@inject ViewDataService ViewDataService
@inject UserStatusService statusService
@inject MetaDataService metadataService

<div class="damselfly-tagview">
    @if (Tags == null)
    {
        <p><em>Loading tags...</em></p>
    }
    else
    {
        <MudTable Items="@Tags" FixedHeader="true" RowsPerPage="20" Virtualize="true" Dense="true" Hover="true" Bordered="false" Striped="true"
                    Filter="new Func<Tag,bool>(FilterFunc)" @bind-SelectedItem="selectedTag">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Keyword Tags</MudText>
                <MudSpacer />
                <ConflatedTextBox IconClass="fa-search" id="searchBox" placeholder="Search" OnValueChanged="@DoSearch" TextValue="@searchText" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Tag, object>(x=>x.TagId)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Tag, object>(x=>x.Keyword)">Keyword</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Tag, object>(x=>x.Favourite)">Favourite</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Tag, object>(x=>x.TimeStamp)">Date Created</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.TagId</MudTd>
                <MudTd DataLabel="Keyword">
                    <NavLink href="@TagLink( @context )">@context.Keyword</NavLink>
                </MudTd>
                <MudTd DataLabel="Favourite?">@context.Favourite</MudTd>
                <MudTd DataLabel="Date Created">@context.TimeStamp</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</div>
@code {
    [Parameter]
    public string TagName { get; set; }

    Tag selectedTag;
    string searchText;

    private string TagLink( Tag tag ) => $"/?tagid={tag.TagId}";

    private IEnumerable<Tag> Tags
    {
        get
        {
            return metadataService.CachedTags.OrderBy(x => x.Favourite)
                                             .ThenBy(x => x.Keyword, StringComparer.OrdinalIgnoreCase);
        }
    }


    private void DoSearch(string searchTerm)
    {
        statusService.StatusText = $"Searching for {searchTerm}...";
        searchText = searchTerm;
        InvokeAsync(StateHasChanged);
    }


    private bool FilterFunc( Tag tag )
    {
        if (string.IsNullOrEmpty(searchText))
            return true;

        return tag.Keyword.Contains(searchText, StringComparison.OrdinalIgnoreCase);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowBasket = true, ShowTags = true });
        }
    }
}
