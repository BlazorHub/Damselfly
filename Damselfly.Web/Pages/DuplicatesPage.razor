@page "/image/duplicates"

@inject NavigationService navContext
@inject ViewDataService ViewDataService

@using Damselfly.Core.ImageProcessing

<div class="damselfly-export">
    <div>
        <div class="damselfly-imagenavitem">
            <a href="/"><i class="clickable-icon fa fa-reply" /></a>
            <h4 class="image-title">
                Images with Duplicates
            </h4>
        </div>
    </div>
    <div class="damselfly-dupelist">
        @if (imageLists != null)
        {
            @foreach (var list in imageLists)
            {
                <div class="damselfly-duplicate">
                    <div class="damselfly-dupeimage">
                        <img src="@GetImgUrl(list[0])" />
                    </div>

                    <div class="damselfly-dupe-entries">
                        @foreach( var img in list )
                        {
                            <div class="damselfly-dupe-entry">
                                @img.FullPath, Date Taken: @img.SortDate.Display()
                            </div>
                        }
                    </div>
              </div>
            }
        }
        else
        {
            <p>Loading selection...</p>
        }
    </div>
</div>

@code {
    public Image CurrentImage { get; set; }

    List<List<Image>> imageLists = new List<List<Image>>();

    private string GetImgUrl( Image image )
    {
        return $"/thumb/{ThumbSize.Small}/{image.ImageId}";
    }

    public Task<List<List<Image>>> LoadData()
    {
        var watch = new Stopwatch("DupesLoadData");
        imageLists.Clear();

        imageLists = ImageService.GetImagesWithDuplicates();
        watch.Stop();

        return Task.FromResult(imageLists);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowExport = true });

            await LoadData();

            StateHasChanged();
        }
    }

}
