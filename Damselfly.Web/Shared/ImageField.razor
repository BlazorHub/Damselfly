
@if (!string.IsNullOrEmpty(FieldValue) || Editable)
{
    <div>
        <label class="imagefield-label" title="@Tooltip">@FieldName:
            @if (string.IsNullOrEmpty(Href))
            {
                @if(editing )
                {
                    <input @ref="inputField" class="SearchField" placeholder="@FieldValue" value="@FieldValue" @onchange="ValueChanged" @onblur="LostFocus"/>
                }
                else 
                {
                    <span class="imagefield-val">@FieldValue</span>
                    @if( Editable )
                    {
                        <i class="fas fa-edit" title="Click here to edit this field" @onclick="EditField" />
                    }
                }
            }
            else
            {
                <NavLink href="@Href">@FieldValue</NavLink>
            }
        </label>
    </div>
}

@code {
    [Parameter]
    public string FieldName { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Href { get; set; }

    [Parameter]
    public bool Editable { get; set; } = false;

    [Parameter]
    public string FieldValue { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    private bool editing = false;
    private ElementReference inputField;
    private string Tooltip => Title?.Trim();

    private async void ValueChanged(ChangeEventArgs args)
    {
        editing = false;
        StateHasChanged();

        await OnValueChanged.InvokeAsync(args);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if( editing )
            {
                await inputField.FocusAsync();
            }
        }
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Title))
            Title = FieldValue;

        base.OnInitialized();
    }

    private void LostFocus()
    {
        editing = false;
        StateHasChanged();
    }

    private void EditField()
    {
        editing = true;
        StateHasChanged();
    }
}