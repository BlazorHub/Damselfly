@using Damselfly.Core.Services;
@using Damselfly.Web.Shared;
@using Damselfly.ML.Face.Azure;
@using Damselfly.Core.Utils.Constants;
@using Humanizer;

@inject IJSRuntime JsRuntime
@inject ConfigService configService
@inject ThemeService themeService
@inject StatusService statusService
@inject WordpressService wpService
@inject TaskService taskScheduler
@inject AzureFaceService azureService

<div class="damselfly-config">
    <div class="damselfly-configsection">
        <h1>Configuration Settings</h1>
    </div>
    <div class="damselfly-configsection">
        <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>Embed Sidecar (XMP/OM1) keywords during indexing:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputCheckbox @bind-Value="importSidecarKeywords" />
                </div>
            </div>

            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>Theme: </label>
                </div>
                <div class="damselfly-configfield">
                    <InputSelect @bind-Value="selectedTheme">
                        @foreach (var choice in themeService.Themes)
                        {
                            <option value="@choice">
                                @choice.Transform(To.SentenceCase)
                            </option>
                        }
                    </InputSelect>
                </div>
            </div>

            <h2>Wordpress Upload</h2>

            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>URL:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputText placeholder="Wordpress URL" @bind-Value="wpSettings.URL" />
                </div>
            </div>
            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>User Name:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputText placeholder="User Name" @bind-Value="wpSettings.UserName" />
                </div>
            </div>
            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>Password:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputText type="password" placeholder="Password" @bind-Value="wpSettings.Password" />
                </div>
            </div>

            <h2>Azure Cognitive Services Face Recognition</h2>

            <p>
                <a href="https://azure.microsoft.com/services/cognitive-services/face/" target="_blank">Azure Face</a>
                is an online Face-recognition service provided by Microsoft.
                <a href="https://azure.microsoft.com/free/cognitive-services/" target="_blank">Sign up for a free account</a>
                and register your endpoint and key here; Damselfly will then use the service for fast, accurate face
                recognition. Note that free accounts have a limit of 20 transactions per min, and 30,000 transactions per
                month (Damselfly uses around 3 transactions per image processed). To use the tranaction limit efficiently
                you can elect to only submit images to Azure which have faces or people detected in them by Damselfly's
                offline detection.'
            </p>

            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>URL:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputText placeholder="Endpoint" @bind-Value="azureSettings.Endpoint" />
                </div>
            </div>
            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>Key 1:</label>
                </div>
                <div class="damselfly-configfield">
                    <InputText placeholder="API Key" @bind-Value="azureSettings.ApiKey" />
                </div>
            </div>
            <div class="damselfly-configsetting">
                <div class="damselfly-configlabel">
                    <label>Azure Detection: </label>
                </div>
                <div class="damselfly-configfield">
                    <InputSelect @bind-Value="azureSettings.DetectionType">
                        @foreach (var choice in Enum.GetValues(typeof(AzureFaceService.AzureDetection)))
                        {
                            <option value="@choice">
                                @choice.ToString().Humanize()
                            </option>
                        }
                    </InputSelect>
                </div>
            </div>

            <button class="btn btn-primary" type="submit">Save Settings</button>
        </EditForm>

    </div>

</div>

@code {
    private WordpressSettings wpSettings = new WordpressSettings();
    private AzureSettings azureSettings = new AzureSettings();
    private bool importSidecarKeywords = false;
    private string selectedTheme;

    private void HandleValidSubmit()
    {
        configService.Set(ConfigSettings.ImportSidecarKeywords, importSidecarKeywords.ToString());

        configService.Set(ConfigSettings.WordpressURL, wpSettings.URL);
        configService.Set(ConfigSettings.WordpressUser, wpSettings.UserName);
        configService.Set(ConfigSettings.WordpressPassword, wpSettings.Password);

        // WP Settings have changed, so reset the client and token
        wpService.ResetClient();

        configService.Set(ConfigSettings.AzureEndpoint, azureSettings.Endpoint);
        configService.Set(ConfigSettings.AzureApiKey, azureSettings.ApiKey);
        configService.Set(ConfigSettings.AzureDetectionType, azureSettings.DetectionType.ToString());

        if (themeService.CurrentTheme != selectedTheme)
        {
            themeService.CurrentTheme = selectedTheme;
            _ = JsRuntime.InvokeVoidAsync("window.location.reload");
        }

        // Init the azure service status based on config.
        azureService.StartService( new TransThrottle(CloudTransaction.TransactionType.AzureFace) );

        statusService.StatusText = "Settings saved.";
    }

    protected override void OnInitialized()
    {
        wpSettings.URL = configService.Get(ConfigSettings.WordpressURL);
        wpSettings.UserName = configService.Get(ConfigSettings.WordpressUser);
        wpSettings.Password = configService.Get(ConfigSettings.WordpressPassword);

        azureSettings.Endpoint = configService.Get(ConfigSettings.AzureEndpoint);
        azureSettings.ApiKey = configService.Get(ConfigSettings.AzureApiKey);
        azureSettings.DetectionType = configService.Get(ConfigSettings.AzureDetectionType, AzureFaceService.AzureDetection.Disabled);

        importSidecarKeywords = configService.GetBool(ConfigSettings.ImportSidecarKeywords);
        selectedTheme = themeService.CurrentTheme;
        base.OnInitialized();
    }

    private void RunTask(ScheduledTask task)
    {
        taskScheduler.EnqueueTaskAsync(task);
    }
}
