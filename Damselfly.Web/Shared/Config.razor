@using Damselfly.Core.Services;
@using Damselfly.ML.Face.Azure;
@using Damselfly.Core.DbModels;
@using Damselfly.Core.Utils.Constants;
@using Humanizer;

@inject IJSRuntime JsRuntime
@inject ConfigService configService
@inject UserConfigService userConfigService
@inject ThemeService themeService
@inject UserStatusService statusService
@inject WordpressService wpService
@inject TaskService taskScheduler
@inject AzureFaceService azureService

<div class="damselfly-config">
    <h1>Configuration Settings</h1>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="damselfly-configsection">
        <AuthorizeView Context="auth">
            <MudTabPanel Text="User Config">
                <h2>Settings for @auth.User.Identity.Name</h2>
                <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
                    <FluentValidationValidator />
                    <ValidationSummary />

                    <div class="damselfly-configsetting">
                        <div class="damselfly-configfield">
                            <MudSelect T="string" Label="Theme" HelperText="Select colour theme for the app" @bind-Value="selectedTheme" Variant="Variant.Filled">
                                @foreach (var choice in themeService.Themes)
                                {
                                    <MudSelectItem T="string" Value="@choice">
                                        @choice.Transform(To.SentenceCase)
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </div>
                    <button class="btn btn-primary" type="submit">Save Settings</button>
                </EditForm>
            </MudTabPanel>
        </AuthorizeView>
        <AuthorizeView Policy="@PolicyDefinitions.s_IsAdmin">
            <MudTabPanel Text="User Management">
                <div>
                <UserManagement />
                </div>
            </MudTabPanel>
        </AuthorizeView>
        <MudTabPanel Text="Admin Config">
            <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
                <FluentValidationValidator />
                <ValidationSummary />

                <h2>SideCar Processing</h2>
                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudCheckBox @bind-Checked="@importSidecarKeywords" Label="Write Sidecar (XMP/ON1) keywords to image files during indexing" />
                    </div>
                </div>

                <h2>Wordpress Upload</h2>

                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudTextField @bind-Value="@wpSettings.URL" Label="Wordpress URL" ReadOnly="false" Variant="Variant.Filled" />
                    </div>
                </div>
                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudTextField @bind-Value="@wpSettings.UserName" Label="Wordpress User Name" ReadOnly="false" Variant="Variant.Filled" />
                    </div>
                </div>
                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudTextField @bind-Value="@wpSettings.Password" InputType="InputType.Password" Label="Wordpress Password" ReadOnly="false" Variant="Variant.Filled" />
                    </div>
                </div>

                <button class="btn btn-primary" type="submit">Save Settings</button>
            </EditForm>
        </MudTabPanel>
        <MudTabPanel Text="AI Config">
            <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
                <FluentValidationValidator />
                <ValidationSummary />

                <h2>Azure Cognitive Services Face Recognition</h2>

                <p>
                    <a href="https://azure.microsoft.com/services/cognitive-services/face/" target="_blank">Azure Face</a>
                    is an online Face-recognition service provided by Microsoft.
                    <a href="https://azure.microsoft.com/free/cognitive-services/" target="_blank">Sign up for a free account</a>
                    and register your endpoint and key here; Damselfly will then use the service for fast, accurate face
                    recognition. Note that free accounts have a limit of 20 transactions per min, and 30,000 transactions per
                    month (Damselfly uses around 3 transactions per image processed). 
                </p>

                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudTextField @bind-Value="@azureSettings.Endpoint" Label="Azure Endpoint" ReadOnly="false" Variant="Variant.Filled" />
                    </div>
                </div>
                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudTextField @bind-Value="@azureSettings.ApiKey" Label="Azure API Key" ReadOnly="false" Variant="Variant.Filled" />
                    </div>
                </div>
                <p>
                    To use the tranaction limit efficiently you can elect to only submit images to Azure which have faces
                    or people detected in them by Damselfly's offline detection.
                </p>
                <div class="damselfly-configsetting">
                    <div class="damselfly-configfield">
                        <MudSelect T="AzureFaceService.AzureDetection" Label="AI Application" HelperText="Select the roles to which this user belongs" @bind-Value="azureSettings.DetectionType" Variant="Variant.Filled">
                            @foreach (var choice in (AzureFaceService.AzureDetection[])Enum.GetValues(typeof(AzureFaceService.AzureDetection)))
                            {
                                <MudSelectItem T="AzureFaceService.AzureDetection" Value="@choice">
                                    @choice.ToString().Humanize()
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </div>

                <button class="btn btn-primary" type="submit">Save Settings</button>
            </EditForm>
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    private WordpressSettings wpSettings = new WordpressSettings();
    private AzureSettings azureSettings = new AzureSettings();
    private bool importSidecarKeywords = false;
    private string selectedTheme;

    private void HandleValidSubmit()
    {
        configService.Set(ConfigSettings.ImportSidecarKeywords, importSidecarKeywords.ToString());

        configService.Set(ConfigSettings.WordpressURL, wpSettings.URL);
        configService.Set(ConfigSettings.WordpressUser, wpSettings.UserName);
        configService.Set(ConfigSettings.WordpressPassword, wpSettings.Password);

        // WP Settings have changed, so reset the client and token
        wpService.ResetClient();

        configService.Set(ConfigSettings.AzureEndpoint, azureSettings.Endpoint);
        configService.Set(ConfigSettings.AzureApiKey, azureSettings.ApiKey);
        configService.Set(ConfigSettings.AzureDetectionType, azureSettings.DetectionType.ToString());

        if (themeService.CurrentTheme != selectedTheme)
        {
            themeService.CurrentTheme = selectedTheme;
            //_ = JsRuntime.InvokeVoidAsync("window.location.reload");
        }

        // Init the azure service status based on config.
        azureService.StartService(new TransThrottle(CloudTransaction.TransactionType.AzureFace));

        statusService.StatusText = "Settings saved.";
    }

    protected override void OnInitialized()
    {
        wpSettings.URL = configService.Get(ConfigSettings.WordpressURL);
        wpSettings.UserName = configService.Get(ConfigSettings.WordpressUser);
        wpSettings.Password = configService.Get(ConfigSettings.WordpressPassword);

        azureSettings.Endpoint = configService.Get(ConfigSettings.AzureEndpoint);
        azureSettings.ApiKey = configService.Get(ConfigSettings.AzureApiKey);
        azureSettings.DetectionType = configService.Get(ConfigSettings.AzureDetectionType, AzureFaceService.AzureDetection.Disabled);

        importSidecarKeywords = configService.GetBool(ConfigSettings.ImportSidecarKeywords);
        selectedTheme = themeService.CurrentTheme;

        base.OnInitialized();
    }

    private void RunTask(ScheduledTask task)
    {
        taskScheduler.EnqueueTaskAsync(task);
    }
}
