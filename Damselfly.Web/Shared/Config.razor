@using Damselfly.Core.Services;
@using Damselfly.ML.Face.Azure;
@using Damselfly.Core.DbModels;
@using Damselfly.Core.Utils.Constants;
@using Damselfly.Core.Interfaces;
@using Humanizer;

@inject IJSRuntime JsRuntime
@inject ConfigService configService
@inject UserConfigService userConfigService
@inject ThemeService themeService
@inject UserStatusService statusService
@inject WordpressService wpService
@inject TaskService taskScheduler
@inject AzureFaceService azureService

<div class="damselfly-config">
    <h1>Configuration Settings</h1>
    <AuthorizeView>
        <NotAuthorized>
            <p>Please <a href="/Identity/Account/Login">log in</a> to access user and system settings.</p>
        </NotAuthorized>
        <Authorized Context="auth">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="damselfly-configsection">
                <MudTabPanel Text="User Settings">
                    <h2>Settings for @auth.User.Identity.Name</h2>
                    <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
                        <FluentValidationValidator />
                        <ValidationSummary />

                        <div class="damselfly-configsetting">
                            <div class="damselfly-configfield">
                                <MudSelect T="string" Label="Theme" HelperText="Select colour theme for the app" @bind-Value="selectedTheme" Variant="Variant.Filled">
                                    @foreach (var choice in themeService.Themes)
                                    {
                                        <MudSelectItem T="string" Value="@choice">
                                            @choice.Transform(To.SentenceCase)
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                        </div>
                        <button class="btn btn-primary" type="submit">Save Settings</button>
                    </EditForm>
                </MudTabPanel>

                <AuthorizeView Policy="@PolicyDefinitions.s_IsAdmin" Context="authPolicy">
                    <MudTabPanel Text="System Settings">
                        <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
                            <FluentValidationValidator />
                            <ValidationSummary />

                            <h2>SideCar Processing</h2>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudCheckBox @bind-Checked="@importSidecarKeywords" Label="Write Sidecar (XMP/ON1) keywords to image files during indexing" />
                                </div>
                            </div>

                            <h2>Security</h2>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudCheckBox @bind-Checked="@forceLogin" Label="Force users to login before accessing Damselfly" />
                                </div>
                            </div>

                            <h2>Wordpress Upload</h2>

                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudTextField @bind-Value="@wpSettings.URL" Label="Wordpress URL" ReadOnly="false" Variant="Variant.Filled" />
                                </div>
                            </div>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudTextField @bind-Value="@wpSettings.UserName" Label="Wordpress User Name" ReadOnly="false" Variant="Variant.Filled" />
                                </div>
                            </div>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudTextField @bind-Value="@wpSettings.Password" InputType="InputType.Password" Label="Wordpress Password" ReadOnly="false" Variant="Variant.Filled" />
                                </div>
                            </div>

                            <button class="btn btn-primary" type="submit">Save Settings</button>
                        </EditForm>
                    </MudTabPanel>

                    <MudTabPanel Text="Face Recognition">
                        <EditForm Model="@azureSettings" OnValidSubmit="@HandleValidSubmit">
                            <FluentValidationValidator />
                            <ValidationSummary />

                            <h2>Azure Cognitive Services Face Recognition</h2>

                            <p>
                                <a href="https://azure.microsoft.com/services/cognitive-services/face/" target="_blank">Azure Face</a>
                                is an online Face-recognition service provided by Microsoft.
                                <a href="https://azure.microsoft.com/free/cognitive-services/" target="_blank">Sign up for a free account</a>
                                and register your endpoint and key here; Damselfly will then use the service for fast, accurate face
                                recognition. Note that free accounts have a limit of 20 transactions per min, and 30,000 transactions per
                                month (Damselfly uses around 3 transactions per image processed).
                            </p>

                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudTextField @bind-Value="@azureSettings.Endpoint" Label="Azure Endpoint" ReadOnly="false" Variant="Variant.Filled" />
                                </div>
                            </div>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudTextField @bind-Value="@azureSettings.ApiKey" Label="Azure API Key" ReadOnly="false" Variant="Variant.Filled" />
                                </div>
                            </div>
                            <p>

                            </p>
                            <div class="damselfly-configsetting">
                                <div class="damselfly-configfield">
                                    <MudSelect T="AzureFaceService.AzureDetection" Label="AI Application" @bind-Value="azureSettings.DetectionType" Variant="Variant.Filled"
                                               HelperText="To use the tranaction limit efficiently you can elect to only submit images to Azure which have had faces or people detected in them.">
                                        @foreach (var choice in (AzureFaceService.AzureDetection[])Enum.GetValues(typeof(AzureFaceService.AzureDetection)))
                                        {
                                            <MudSelectItem T="AzureFaceService.AzureDetection" Value="@choice">
                                                @choice.ToString().Humanize()
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                            </div>

                            <button class="btn btn-primary" type="submit">Save Settings</button>
                        </EditForm>
                    </MudTabPanel>

                    <MudTabPanel Text="User Management">
                        <div>
                            <UserManagement />
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Text="Email Notifications">
                        <EditForm Model="@(useSmtp ? smtpSettings : sendGridSettings)" OnValidSubmit="@HandleValidSubmit">
                            <FluentValidationValidator />
                            <ValidationSummary />

                            <h2>Email Settings for Password Reminders, etc.</h2>

                            <p>Reminder emails can be sent using SMTP or SendGrid (you can sign up for a free SendGrid account <a href="https://signup.sendgrid.com/" target="_blank">here).</a></p>
                            <MudSwitch T="bool" @bind-Checked="@useSmtp" Label="@(useSmtp ? "SMTP" : "SendGrid")" />

                            @if (useSmtp)
                            {
                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@smtpSettings.MailServer" Label="SMTP Server Address" ReadOnly="false" Variant="Variant.Filled" />
                                    </div>
                                </div>
                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@smtpSettings.MailPort" Label="SMTP Port" ReadOnly="false" Variant="Variant.Filled" />
                                    </div>
                                </div>
                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@smtpSettings.Password" InputType="InputType.Password" Label="SMTP Password" UserAttributes="@MudNoAutofill.noAutoFillAttr" ReadOnly="false" Variant="Variant.Filled" />
                                    </div>
                                </div>

                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@smtpSettings.Sender" Label="Sender Email" InputType="InputType.Email" UserAttributes="@MudNoAutofill.noAutoFillAttr" ReadOnly="false" Variant="Variant.Filled" />
                                    </div>
                                </div>

                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@smtpSettings.SenderName" Label="Sender Name" ReadOnly="false" UserAttributes="@MudNoAutofill.noAutoFillAttr" Variant="Variant.Filled" />
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@sendGridSettings.SendGridKey" Label="SendGrid API Key" ReadOnly="false" Variant="Variant.Filled" />
                                    </div>
                                </div>
                                <div class="damselfly-configsetting">
                                    <div class="damselfly-configfield">
                                        <MudTextField @bind-Value="@sendGridSettings.SendGridFromAddress" Label="SendGrid From Address" UserAttributes="@MudNoAutofill.noAutoFillAttr" InputType="InputType.Email" ReadOnly="false"
                                                      Variant="Variant.Filled" HelperText="This should match the email address associated with your API key in your SendGrid account" />
                                    </div>
                                </div>
                            }
                            <button class="btn btn-primary" type="submit">Save Settings</button>
                        </EditForm>
                    </MudTabPanel>
                </AuthorizeView>
            </MudTabs>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private WordpressSettings wpSettings = new WordpressSettings();
    private AzureSettings azureSettings = new AzureSettings();
    private EmailSmtpService.SmtpSettings smtpSettings = new EmailSmtpService.SmtpSettings();
    private EmailSendGridService.SendGridSettings sendGridSettings = new EmailSendGridService.SendGridSettings();
    private bool importSidecarKeywords = false;
    private string selectedTheme;
    private bool useSmtp = true;
    private bool forceLogin = false;

    private void HandleValidSubmit()
    {
        try
        {
            configService.Set(ConfigSettings.ImportSidecarKeywords, importSidecarKeywords.ToString());

            configService.Set(ConfigSettings.WordpressURL, wpSettings.URL);
            configService.Set(ConfigSettings.WordpressUser, wpSettings.UserName);
            configService.Set(ConfigSettings.WordpressPassword, wpSettings.Password);

            configService.Set(ConfigSettings.AzureEndpoint, azureSettings.Endpoint);
            configService.Set(ConfigSettings.AzureApiKey, azureSettings.ApiKey);
            configService.Set(ConfigSettings.AzureDetectionType, azureSettings.DetectionType.ToString());

            configService.Set(ConfigSettings.UseSmtp, useSmtp.ToString());
            configService.Set(ConfigSettings.ForceLogin, forceLogin.ToString());

            smtpSettings.Save(configService);
            sendGridSettings.Save(configService);

            if (themeService.CurrentTheme != selectedTheme)
            {
                themeService.CurrentTheme = selectedTheme;
            }

            statusService.StatusText = "Settings saved.";

            UpdateServicesWithNewSettings();
        }
        catch ( Exception ex )
        {
            statusService.StatusText = "Unable to save settings.";
            Logging.LogError($"Error saving settings: {ex}");
        }
    }

    private void UpdateServicesWithNewSettings()
    {
        try
        {
            // Init the azure service status based on config.
            azureService.StartService(new TransThrottle(CloudTransaction.TransactionType.AzureFace));

            // WP Settings have changed, so reset the client and token
            wpService.ResetClient();

        }
        catch( Exception ex )
        {
            Logging.LogError($"Exception initialising services after settings update: {ex}");
        }
    }

    protected override void OnInitialized()
    {
        wpSettings.URL = configService.Get(ConfigSettings.WordpressURL);
        wpSettings.UserName = configService.Get(ConfigSettings.WordpressUser);
        wpSettings.Password = configService.Get(ConfigSettings.WordpressPassword);

        azureSettings.Endpoint = configService.Get(ConfigSettings.AzureEndpoint);
        azureSettings.ApiKey = configService.Get(ConfigSettings.AzureApiKey);
        azureSettings.DetectionType = configService.Get(ConfigSettings.AzureDetectionType, AzureFaceService.AzureDetection.Disabled);

        forceLogin = configService.GetBool(ConfigSettings.ForceLogin);
        useSmtp = configService.GetBool(ConfigSettings.UseSmtp);

        smtpSettings.Load(configService);
        sendGridSettings.Load(configService);

        importSidecarKeywords = configService.GetBool(ConfigSettings.ImportSidecarKeywords);
        selectedTheme = themeService.CurrentTheme;

        base.OnInitialized();
    }

    private void RunTask(ScheduledTask task)
    {
        taskScheduler.EnqueueTaskAsync(task);
    }
}
