@using Damselfly.Core.Services;
@using Damselfly.Web.Shared;

@inject TaskService taskScheduler

<div class="damselfly-config">
    <div>
        <h1>Damselfly Configuration Settings</h1>
    </div>
    <div class="damselfly-configform">
        <h2>Wordpress Upload</h2>

        <EditForm Model="@wpSettings" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <div>
                    <label>URL:</label>
                </div>
                <div>
                    <InputText placeholder="Wordpress URL" @bind-Value="wpSettings.URL" />
                </div>
            </div>
            <div>
                <div>
                    <label>User Name:</label>
                </div>
                <div>
                    <InputText placeholder="User Name" @bind-Value="wpSettings.UserName" />
                </div>
            </div>
            <div>
                <div>
                    <label>Password:</label>
                </div>
                <div>
                    <InputText type="password" placeholder="Password" @bind-Value="wpSettings.Password" />
                </div>
            </div>

            <button class="btn btn-primary" type="submit">Save</button>
        </EditForm>
    </div>

    <div class="damselfly-tasks">
        <TaskList />
    </div>
</div>

@code {
    private WordpressSettings wpSettings = new WordpressSettings();

    // Banana54321!!
    private void HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(wpSettings.UserName) &&
            !string.IsNullOrEmpty(wpSettings.Password))
        {
            ConfigService.Instance.Set(ConfigSettings.WordpressURL, wpSettings.URL);
            ConfigService.Instance.Set(ConfigSettings.WordpressUser, wpSettings.UserName);
            ConfigService.Instance.Set(ConfigSettings.WordpressPassword, wpSettings.Password);

            // Settings have changed, so reset the client and token
            WordpressService.Instance.ResetClient();

            StatusService.Instance.StatusText = "Settings saved.";
        }
    }

    protected override void OnInitialized()
    {
        wpSettings.URL = ConfigService.Instance.Get(ConfigSettings.WordpressURL);
        wpSettings.UserName = ConfigService.Instance.Get(ConfigSettings.WordpressUser);
        wpSettings.Password = ConfigService.Instance.Get(ConfigSettings.WordpressPassword);

        base.OnInitialized();
    }

    private void RunTask(ScheduledTask task)
    {
        taskScheduler.EnqueueTaskAsync(task);
    }
}