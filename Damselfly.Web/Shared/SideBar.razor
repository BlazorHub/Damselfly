@using Damselfly.Web.Shared
@inherits LayoutComponentBase
@inject ViewDataService ViewDataService
@inject NavigationService navContext


<div class="damselfly-sidebar">
    <div>
        <div>
            <DamselflyLogo />

            @if (navContext.CurrentImage != null)
            {
                <ToolWindow Title="Image Properties">
                    <ChildContent>
                        <ImageProperties />
                    </ChildContent>
                </ToolWindow>
            }
            @if (ViewDataService.ShowBasket)
            {
                <ToolWindow Title="Basket">
                    <ChildContent>
                        <SelectedImages />
                    </ChildContent>
                </ToolWindow>
            }
            @if (ViewDataService.ShowTags)
            {
                <ToolWindow Title="Image Keywords">
                    <ChildContent>
                        <Keywords />
                    </ChildContent>
                </ToolWindow>
                <ToolWindow Title="Add Keywords">
                    <ChildContent>
                        <KeywordFavourites />
                    </ChildContent>
                </ToolWindow>
            }
            @if (ViewDataService.ShowFolderList)
            {
                <ToolWindow Title="Folders">
                    <ChildContent>
                        <FolderList />
                    </ChildContent>
                </ToolWindow>
            }
            @if (ViewDataService.ShowExport)
            {
                <ToolWindow Title="Export">
                    <ChildContent>
                        <ExportSettings />
                    </ChildContent>
                </ToolWindow>
            }
        </div>
    </div>
</div>

@code { protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewDataService.PropertyChanged += OnPropertyChanged;
    }

    private void OnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
}