
@inject ThemeService themeService
@inject ConfigService configService
@inject IJSRuntime JsRuntime
@implements IDisposable

<MudThemeProvider Theme="@MudTheme" />

@code {
    private long cacheBuster = 1;
    private MudTheme MudTheme;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        MudTheme = darkTheme;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            themeService.OnChangeTheme += SwitchTheme;
            SwitchTheme(themeService.Theme);
        }
    }

    public void Dispose()
    {
        themeService.OnChangeTheme -= SwitchTheme;
    }

    /// <summary>
    /// We parse the variables out of the CSS theme file. This will
    /// give us a dictionary of variable name => colour
    /// </summary>
    /// <returns></returns>
    private IDictionary<string, string> ParseCSS()
    {
        var lines = File.ReadAllLines( themeService.CurrentThemeFullPath );

        // Pull out the variables
        return lines.Select(x => x.Trim())
                            .Where(x => x.StartsWith("--"))
                            .Select(x => x.Substring(2, x.Length - 3))
                            .Select(x => x.Split(':', 2))
                            .ToDictionary(x => x.First().Trim(), y => y.Last().Trim());
    }

    /// <summary>
    /// Given the new theme, parse its colours and variable names out, and
    /// then map them to Mud colours.
    /// </summary>
    /// <param name="newTheme"></param>
    /// <returns></returns>
    private Palette CreateMudThemeFromCSS(string newTheme)
    {
        try
        {
            var dict = ParseCSS();

            return new Palette
            {
                Black = dict["main-background"],
                Surface = dict["keyword-bg"],
                Primary = dict["body-text"], // Primary highlighted text, such as selected tab text
                PrimaryDarken = dict["keyword-border"],
                PrimaryLighten = dict["statusbar-text"],
                TextPrimary = dict["body-text"],
                TextSecondary = dict["tool-window-text"],
                ActionDefault = dict["statusbar-text"],
                ActionDisabled = "rgba(255,255,255, 0.26)",
                Background = dict["main-background"],
                BackgroundGrey = dict["tool-window-bg"],
                DrawerBackground = "#2f2f2f",
                DrawerText = "rgba(255,255,255, 0.50)",
                DrawerIcon = "rgba(255,255,255, 0.50)",
                AppbarBackground = dict["statusbar-text"],
                AppbarText = "rgba(255,255,255, 0.70)",
                Divider = dict["tool-window-title"],
                DividerLight = dict["tool-window-title-bg"],
                TableLines = dict["keyword-border"],
                LinesDefault = dict["keyword-border"],
                LinesInputs = dict["keyword-border"],
                ActionDisabledBackground = "rgba(255,255,255, 0.4)",
                TextDisabled = "rgba(255,255,255, 0.4)"
            };
        }
        catch ( Exception ex )
        {
            Logging.LogWarning($"Unable to parse theme CSS: {ex.Message}");
            return null;
        }
    }

    private void SwitchTheme(string newTheme)
    {
        var themeCSS = $"themes/{newTheme}.css?j={cacheBuster++}";
        _ = JsRuntime.InvokeAsync<string>("setStyleSheet", themeCSS);

        var palette = CreateMudThemeFromCSS(newTheme);

        if( palette != null )
        {
            MudTheme = new MudTheme { Palette = palette };
        }
        else
        {
            // Fallback position just in case we can't parse the theme.
            if (newTheme == "white" || newTheme == "flat")
                MudTheme = lightTheme;
            else
                MudTheme = darkTheme;
        }

        // Trigger a statechanged for Mud
        StateHasChanged();
    }

    private MudTheme darkTheme = new MudTheme
    {
        Palette = new Palette
        {
            Primary = "#dddddd",
            PrimaryDarken = "#aaaaaa",
            PrimaryLighten = "#FFFFFF",
            Black = "#222222",
            Background = "#000000",
            BackgroundGrey = "#232323",
            Surface = "#272727",
            DrawerBackground = "#2f2f2f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#2f2f2f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.50)",
            TextSecondary = "rgba(255,255,255, 0.70)",
            ActionDefault = "#adadad",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(255,255,255, 0.2)"
        }
    };

    private MudTheme lightTheme = new MudTheme
    {
        Palette = new Palette
        {
            Primary = "#444444",
            PrimaryDarken = "#222222",
            PrimaryLighten = "#777777",
            Black = "#A7A7A7",
            Background = "#f2f2f2",
            BackgroundGrey = "#cfcfcf",
            Surface = "#f7f7f7",
            DrawerBackground = "#9f9f9f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#9f9f9f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(40,40,40, 0.80)",
            TextSecondary = "rgba(100,100,100, 0.80)",
            ActionDefault = "#2d2d2d",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(100,100,100, 0.12)",
            DividerLight = "rgba(150,150,150, 0.06)",
            TableLines = "rgba(100,100,100, 0.12)",
            LinesDefault = "rgba(200,200,200, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(100,100,100, 0.2)",
            Warning = "#666600"
        }
    };
}
