@using Damselfly.Core.DbModels

@inject UserService userService

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="@User.UserName" Label="User Name" ReadOnly="false" Variant="Variant.Filled" />
        <MudTextField @bind-Value="@User.Email" InputType="InputType.Email" Label="Email" ReadOnly="false" Variant="Variant.Filled" />
        <MudTextField @bind-Value="@password" InputType="InputType.Password" Label="Password" ReadOnly="false" Variant="Variant.Filled" />
        <MudTextField @bind-Value="@passwordConfirm" InputType="InputType.Password" Label="ConfirmPassword" ReadOnly="false" Variant="Variant.Filled" />
        @if (allRoles != null)
        {
            <MudSelect T="string" Label="User Roles" HelperText="Select the roles to which this user belongs" MultiSelection="true" @bind-SelectedValues="selectedRoles" Variant="Variant.Filled">
                @foreach (var role in allRoles)
                {
                    <MudSelectItem T="string" Value="@role.Name">@role.Name</MudSelectItem>
                }
            </MudSelect>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
        [CascadingParameter]
        MudDialogInstance MudDialog { get; set; }

        [Parameter]
        public AppIdentityUser User { get; set; } = new AppIdentityUser();

    private string password, passwordConfirm;

    private ICollection<ApplicationRole> allRoles;
    private HashSet<string> selectedRoles { get; set; } = new HashSet<string>();

    async Task Save()
    {
        bool success = true;

        if (!string.IsNullOrEmpty(password) && password.Equals(passwordConfirm))
        {
            success = await userService.SetUserPasswordAsync(User, password);
        }
        else
        {
            success = await userService.UpdateUserAsync(User, selectedRoles);
        }

        if( success )
            MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allRoles = await userService.GetRoles();
            foreach( var role in User.UserRoles )
            {
                selectedRoles.Add(role.Role.Name);
            }
            StateHasChanged();
        }
    }
}