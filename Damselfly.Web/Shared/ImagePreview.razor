<!--
    Image preview panel - displays an image in full res. To keep the UX nice, the initial image
    is set to the medium thumb (which should load very quickly) and a hidden image loads the
    full-res version - which may need to be generated on the fly. Once that's loaded, the URL
    of the visible image is updated which should update it instantly.
-->
@inject IJSRuntime JsRuntime

@using Damselfly.Core.ImageProcessing

<div class="damselfly-imagedisplay img-zoom-container" tabindex="0" @onkeydown="OnKeyDown">
    <div @key="ZoomKey" class="img-zoom-result" id="zoomPane" style="background-size: @ZoomPercentage"/>
    <img @key="ImgKey" src="@ImageUrl" id="theImage" class="image-fill">
</div>

<!-- Hidden image to background load the hi-res version-->
<img @key="ImgPreviewKey" src="@ImageUrlHighRes" @onload="ReplaceUrl" style="display:none">

@code {
    [Parameter]
    public string ImageID { get; set; }

    private int ZoomLevel { get; set; } = ConfigService.Instance.GetInt( ConfigSettings.ZoomLevel, 400 );
    private string ZoomPercentage => $"{ZoomLevel}%";
    private string ImgKey => $"prev{ImageID}";
    private string ZoomKey => $"zoom{ImageID}";
    private string ImgPreviewKey => $"{ImageID}";
    private string ImageUrl { get; set; }
    private string ImageUrlHighRes => $"/thumb/{ThumbSize.ExtraLarge}/{ImageID}";
    // Note - whilst it would be nice to use the original image here for the max
    // detail when zooming, that doesn't work for images which the browser can't
    // render. We could do something like check for the original file extension
    // and see if it's jpg/png/webp though.
    private string ImageUrlZoom => $"/thumb/{ThumbSize.ExtraLarge}/{ImageID}";
    private bool needToInitZoom = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SetupPreload();
    }

    private void SetupPreload()
    {
        ImageUrl = $"/thumb/{ThumbSize.Medium}/{ImageID}";
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        SetupPreload();
        needToInitZoom = true;
    }

    protected void ReplaceUrl(ProgressEventArgs args)
    {
        ImageUrl = ImageUrlHighRes;

        if (needToInitZoom)
        {
            needToInitZoom = false;
            _ = JsRuntime.InvokeAsync<string>("imageZoom", "theImage", ImageUrlZoom, "zoomPane");
        }

        StateHasChanged();
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp")
        {
            ZoomLevel = Math.Min(ZoomLevel + 50, 400);
        }
        else if (e.Key == "ArrowDown")
        {
            ZoomLevel = Math.Max(ZoomLevel - 50, 150);
        }

        ConfigService.Instance.Set(ConfigSettings.ZoomLevel, ZoomLevel.ToString());

        needToInitZoom = true;
        StateHasChanged();
        StatusService.Instance.StatusText = $"Zoom level set to {ZoomLevel}%";
    }
}