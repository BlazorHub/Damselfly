@using Damselfly.Web.Data

<div class="InputAddOn">
    <div class="InputAddOn-item" title="Camera Filter"><i class="fas fa-camera" /></div>
    <select @bind="SearchService.Instance.CameraId" class="InputAddOn-field damselfly-camerafilter">
        @foreach (var camera in cameras)
        {
            <option value="@camera.CameraId" title="@camera.Make">@camera.Model</option>
        }
    </select>
    <select @bind="SearchService.Instance.LensId" class="InputAddOn-field damselfly-camerafilter">
        @foreach (var lens in lenses)
        {
            <option value="@lens.LensId" title="@lens.Make">@lens.Model</option>
        }
    </select>
    <button class="InputAddOn-item" title="Clear Filter" @onclick="@(() => ClearFilter())"><i class="fa fa-times-circle" /></button>
</div>

@code {
    private readonly List<Camera> cameras = new List<Camera>();
    private readonly List<Lens> lenses = new List<Lens>();
    private readonly Lens anyLens = new Lens { LensId = -1, Make = "Any Lens", Model = "Any Lens" };
    private readonly Camera anyCamera = new Camera { CameraId = -1, Make = "Any Camera", Model = "Any Camera" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    public async Task LoadData()
    {
        var watch = new Stopwatch("LoadCameras");
        using var db = new ImageContext();
        this.cameras.Clear();
        this.lenses.Clear();

        this.cameras.AddRange(db.Cameras.OrderBy( x => x.Make + x.Model ) );
        this.lenses.AddRange(db.Lenses.OrderBy(x => x.Make + x.Model));

        cameras.Insert(0, anyCamera);
        lenses.Insert(0, anyLens);

        watch.Stop();

        await InvokeAsync(StateHasChanged);
    }

    private void ClearFilter()
    {
        // TODO: Conflate these so we don't search twice?
        SearchService.Instance.CameraId = -1;
        SearchService.Instance.LensId = -1;
        StateHasChanged();
    }

    private void CameraChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var cameraId))
        {
            Logging.Log("Camera filter changed.");
            SearchService.Instance.CameraId = cameraId;
        }
    }

    private void LensChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var lensId))
        {
            Logging.Log("Lens filter changed.");
            SearchService.Instance.LensId = lensId;
        }
    }
}
