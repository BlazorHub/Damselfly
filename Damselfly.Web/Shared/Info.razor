@using System
@using Damselfly.Web.Shared
@inject IJSRuntime JsRuntime
@inject Damselfly.Core.Interfaces.IImageProcessorFactory imFactory
@implements IDisposable

<LocalFileExporter @ref="FileExporter" />

<div class="damselfly-info">
    <div>
        <img src="damselfly-logo.png" height="200" title="Damselfly" />
    </div>
    <h3>Damselfly v<span />@Version &copy; 2019-@DateTime.Now.Year Mark Otway, All rights reserved.</h3>
    <h4>Server-based Digital Asset Management system</h4>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="damselfly-configsection">
        <MudTabPanel Text="Damselfly Desktop">
            @if (FileExporter != null && FileExporter.IsDesktopHosted)
            {
                <p>Running in the Damselfly Desktop container, v<span />@FileExporter.DesktopVersion</p>
            }
            else
            {
                <p>
                    The Damselfly Desktop app is a special container app which gives you closer integration between
                    Damselfly and your desktop computer. When you run Damselfly in the app, you can copy photos directly
                    from the server to a local folder of your choice, instantly, without needing to download or extract
                    them, and preserving the folder structure from the server.
                </p>
            }
            <DesktopAppDownload />

        </MudTabPanel>
        <MudTabPanel Text="Credits">
            <About/>
        </MudTabPanel>
        <MudTabPanel Text="Stats">
            <Stats />
        </MudTabPanel>
        <MudTabPanel Text="Tasks">
            <h4>Task Statuses:</h4>
            <TaskList />
            <NavLink href="/logs">View Server Logs</NavLink>
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    private LocalFileExporter FileExporter;

    public string Version
    {
        get
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FileExporter.OnChange += StateHasChanged;
        }
    }

    public void Dispose()
    {
        FileExporter.OnChange -= StateHasChanged;
    }
}
