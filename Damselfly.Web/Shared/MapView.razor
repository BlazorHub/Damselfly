
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor

@inject SelectionService selectionService
@inject NavigationService navContext
@implements IDisposable

<style>
    .markerTemplate {
        height: 30px;
        width: 20px;
        display: block;
        margin: auto;
        font-size: 14px;
        pointer-events: none;
    }
</style>
@if (showMap)
{
    <SfMaps>
        <MapsTitleSettings Text="@CurrentImage.FileName">
            <MapsTitleTextStyle FontFamily="Segoe UI" />
        </MapsTitleSettings>
        <MapsCenterPosition Latitude="@Latitude" Longitude="@Longitude" />
        <MapsZoomSettings Enable="false" ZoomFactor="13" />
        <MapsLayers>
            <MapsLayer UrlTemplate="https://a.tile.openstreetmap.org/level/tileX/tileY.png" TValue="string">
                <MapsMarkerSettings>
                    <MapsMarker Visible="true" DataSource="@Markers" TValue="MarkerData"/>
                </MapsMarkerSettings>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
}
else
{
    <div>No GeoData available.</div>
}
@code {
    private bool showMap = false;
    private Image CurrentImage { get; set; }
    private double Latitude { get; set; }
    private double Longitude { get; set; }

    public class MarkerData
    {
        public string Name { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    public List<MarkerData> Markers = new List<MarkerData>();

    protected override void OnInitialized()
    {
        navContext.OnChange += NavigationChanged;
        selectionService.OnSelectionChanged += SelectionChanged;
    }

    public void Dispose()
    {
        navContext.OnChange -= NavigationChanged;
        selectionService.OnSelectionChanged -= SelectionChanged;
    }

    private void NavigationChanged(Image image)
    {
        CurrentImage = image;
        _ = SetMapToImage();
    }

    private void SelectionChanged()
    {
        if (selectionService.Selection.Count == 1)
        {
            CurrentImage = selectionService.Selection.First();
            _ = SetMapToImage();
        }
    }

    private async Task SetMapToImage()
    {
        Markers.Clear();

        if (CurrentImage != null && CurrentImage.MetaData != null &&
            CurrentImage.MetaData.Longitude.HasValue && CurrentImage.MetaData.Latitude.HasValue)
        {
            Latitude = CurrentImage.MetaData.Latitude.Value;
            Longitude = CurrentImage.MetaData.Longitude.Value;
            showMap = true;

            Markers.Add(new MarkerData { Name = CurrentImage.FileName, Latitude = this.Latitude, Longitude = this.Longitude });
        }
        else
            showMap = false;

        await InvokeAsync( StateHasChanged );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetMapToImage();
        }
    }
}