
@inject BasketService basketService
@inject ViewDataService ViewDataService
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

<div class="damselfly-exportpanel">
    <ExportConfigManager CurrentConfig="@selectedConfig"/>
    <div class="damselfly-exportsettings">
        <div>
            <h4>Export Settings</h4>
        </div>
        <div>
            <label for="exportType">Export Type: </label>
            <select name="exportType" value="@selectedConfig.Type">
                @foreach (var choice in exportTypes)
                {
                    <option value="@choice">
                        @choice.ToString()
                    </option>
                }
            </select>
        </div>
        <div>
            <label for="keepFolders">Keep Folders: </label>
            <input id="keepFolders" type="checkbox" @bind="@KeepFolders" />
        </div>
        <div>
            <label for="exportSize">Export Size: </label>
            <select name="exportSize" value="@selectedConfig.Size">
                @foreach (var choice in exportSizes)
                {
                    <option value="@choice">
                        @choice.ToString()
                    </option>
                }
            </select>
        </div>
        <div>
            <label for="watermarkText">Watermark Text: </label>
            <input id="watermarkText" @bind-value="selectedConfig.WatermarkText" />
        </div>
        <div>
                @if (isDesktopHosted)
                {
                    <button @onclick="@ExportToLocalFS" class="btn btn-primary">Save Locally</button>
                }
                <button @onclick="@Export" class="btn btn-primary">Download as Zip</button>
            </div>
        </div>

    </div>

@code {
    public ExportType[] exportTypes { get; private set; } = new ExportType[0];
    public ExportSize[] exportSizes { get; private set; } = new ExportSize[0];

    // TODO: Size etc are not binding.
    public string CurrentConfigName { get { return selectedConfig.Name; } set { ChangeConfig(value); } }
    public List<ExportConfig> configs = new List<ExportConfig>();
    public ExportConfig selectedConfig = new ExportConfig { Name = "Default" };
    public string StatusMessage { get; set; }
    public bool KeepFolders { get; set; }
    public bool isDesktopHosted { get; set; }

    private void ChangeConfig(string name)
    {
        using var db = new ImageContext();

        var config = db.DownloadConfigs.FirstOrDefault(x => x.Name.Equals(name));

        if (config != null)
        {
            selectedConfig = config;
            StatusMessage = $"Loaded Config for '{name}'";
            StateHasChanged();
        }
    }

    private async Task SaveConfig()
    {
        await DownloadService.Instance.SaveDownloadConfig(selectedConfig);
        StatusMessage = $"Saved Config for '{selectedConfig.Name}'";
        await LoadConfigs();
        StateHasChanged();
    }

    private async Task ExportToLocalFS()
    {
        var baseUrl = new Uri(navManager.BaseUri);

        foreach (var image in basketService.SelectedImages)
        {
            var imageUrl = new Uri(baseUrl, image.RawImageUrl);

            // TODO: Save XMP and On1 sidecars with the images here.

            // Image folder is fully qualified, so we need to make it relative to the pictures folder
            // The electron container will use its local settings to create the full path of where
            // the image will be written locally on the client-side
            string localPath = image.FullPath.MakePathRelativeTo(IndexingService.RootFolder);

            StatusService.Instance.StatusText = $"Writing {image.FileName} to {localPath}...";

            // Now, shell out to Javascript, which will trigger the download in the Electron container
            await JsRuntime.InvokeAsync<string>("writeFileLocally", imageUrl, localPath);
        }

        StatusService.Instance.StatusText = "Selected images saved locally.";
    }

    private void Export()
    {
        InvokeAsync(() => { _ = ProcessExport(); });
    }

    private async Task ProcessExport()
    {
        // TODO: How to handle long zip times. Progress meter etc?
        string zipPath = await basketService.DownloadSelection(selectedConfig, KeepFolders);
        await JsRuntime.InvokeAsync<string>("downloadFile", zipPath);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.ShowFolderList = false;
            ViewDataService.ShowBasket = false;
            ViewDataService.ShowExport = true;

            exportTypes = (ExportType[])Enum.GetValues(typeof(ExportType));
            exportSizes = (ExportSize[])Enum.GetValues(typeof(ExportSize));
            await LoadConfigs();

            // Probe for a js function which indicates we're in the electron container
            var version = await JsRuntime.InvokeAsync<string>("getDesktopVersion");
            isDesktopHosted = !string.IsNullOrEmpty( version );

            StateHasChanged();
        }
    }

    private async Task<List<ExportConfig>> LoadConfigs()
    {
        using var db = new ImageContext();
        configs = await Task.FromResult(db.DownloadConfigs.ToList());
        return configs;
    }
}