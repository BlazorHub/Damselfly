
@using Damselfly.Core.ImageProcessing
@using Damselfly.Core.DbModels 

@inject ThumbnailService thumbService
@inject IndexingService indexService
@inject BasketService basketService
@inject SearchService searchService 
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject UserConfigService configService
@inject ImageRecognitionService aiService
 
@inject IJSRuntime JsRuntime
@implements IDisposable 

    @if (CurrentImage == null)
    {
        <div class="damselfly-imageproperties">
            <p><em>Loading image properties...</em></p>
        </div>
    }
    else
    {
<div class="damselfly-imageproperties">
    @if( basketService.CurrentBasket != null )
    {
        <div>Add to @basketService.CurrentBasket.Name: <input class="damselfly-checkbox" type="checkbox" @bind="@InBasket" /></div>
    }
    <div>Date Taken: @CurrentImage.SortDate.Display()</div>
    <div>Filename: @CurrentImage.FileName</div>
    <div>Folder:&nbsp;<NavLink href="@CurrentFolderLink" title="@CurrentImage.Folder.Path">@CurrentImage.Folder.Name</NavLink></div>
    @if (CurrentImage.MetaData != null)
    {
        @if (!string.IsNullOrEmpty(CurrentImage.MetaData.Description))
        {
            <div>Description: @CurrentImage.MetaData.Description</div>
        }
        @if (!string.IsNullOrEmpty(CurrentImage.MetaData.Caption))
        {
            <div>Caption: @CurrentImage.MetaData.Caption</div>
        }
        <div>Width: @CurrentImage.MetaData.Width Height: @CurrentImage.MetaData.Height</div>
        @if (CurrentImage.MetaData.Camera != null)
        {
            <div>
                Camera:
                @CurrentImage.MetaData.Camera.Make
                @CurrentImage.MetaData.Camera.Model
            </div>
        }
        @if (CurrentImage.MetaData.Lens != null)
        {
            <div>
                Lens:
                @CurrentImage.MetaData.Lens.Make
                @CurrentImage.MetaData.Lens.Model
            </div>
        }

        <div>ISO: @CurrentImage.MetaData.ISO</div>
        <div>Aperture: @Aperture</div>
        <div>Exposure: @Exposure </div>

    }
    else
    {
        <div>No metadata available yet.</div>
    }
    @if (Expanded)
    {
        <div @onclick="@(() => CollapseDisplay())">
            Show Less... &nbsp;<i class="fas fa-chevron-up" />
        </div>
    }
    else
    {
        <div @onclick="@(() => ExpandDisplay())">
            Show More... &nbsp; <i class="fas fa-chevron-down" />
        </div>
    }
    @if (Expanded)
    {
        <div>File Modified: @CurrentImage.FileLastModDate.Display()</div>
        <div>
            Thumbs Generated: @ThumbnailUpdate
            <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
                <ToolbarButton IconStyle="fa-sync-alt" OnClickCallback="@RefreshThumb" title="Regenerate thumbnail" />
            </AuthorizeView>
        </div>
        <div>
            AI Processed: @AIProcessDate
            <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
                <ToolbarButton IconStyle="fa-sync-alt" OnClickCallback="@RefreshAI" title="Re-run AI processing" />
            </AuthorizeView>
        </div>

        @if (CurrentImage.MetaData != null)
        {
            <div>Hash: @CurrentImage.MetaData.Hash</div>
        }
    }
</div>
    }

@code {
    private Image theImage;
    public Image CurrentImage { get { return theImage; } set { theImage = value; } }
    public string CurrentFolderLink => $"/folder/{CurrentImage.Folder.FolderId}";
    public string Aperture => $"f{CurrentImage.MetaData.FNum}";
    public string Exposure => $"{CurrentImage.MetaData.Exposure} {(CurrentImage.MetaData.FlashFired ? "(flash)" : string.Empty)}";

    private bool Expanded { get; set; }

    private void ExpandDisplay()
    {
        Expanded = true;
        configService.Set("ShowExtendedProps", Expanded.ToString());
    }

    private void CollapseDisplay()
    {
        Expanded = false;
        configService.Set("ShowExtendedProps", Expanded.ToString());
    }

    public bool InBasket
    {
        get { return basketService.IsSelected(CurrentImage); }
        set{ _ = SetBasketState(value );}
    }

    private async Task SetBasketState(bool newState)
    {
        await basketService.SetBasketState(new[] { CurrentImage }, newState);
        searchService.NotifyStateChanged();
        // Notify the image list that the selection has changed
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Expanded = configService.GetBool("ShowExtendedProps", false);

        if( ! Expanded )
            CollapseDisplay();

        navContext.OnChange += NavigationChanged;
        basketService.OnBasketChanged += BasketStateChanged;
    }

    public void Dispose()
    {
        navContext.OnChange -= NavigationChanged;
        basketService.OnBasketChanged -= BasketStateChanged;
    }

    protected void BasketStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }


    protected void NavigationChanged(Image image)
    {
        if (CurrentImage == null || image == null || image.ImageId != CurrentImage.ImageId)
        {
            CurrentImage = image;
            InvokeAsync( StateHasChanged );
            if (CurrentImage != null)
                Logging.LogVerbose($"ImageProperties: Set current image to {CurrentImage.ImageId} ({CurrentImage.FileName})");
        }
    }

    public string ThumbnailUpdate
    {
        get
        {
            if (CurrentImage != null && CurrentImage.MetaData != null && CurrentImage.MetaData.ThumbLastUpdated.HasValue)
            {
                var age = DateTime.UtcNow - CurrentImage.MetaData.ThumbLastUpdated;

                return age.Value.ToHumanReadableString() + " ago";
            }

            return "Never";
        }
    }

    public string AIProcessDate
    {
        get
        {
            if (CurrentImage != null && CurrentImage.MetaData != null && CurrentImage.MetaData.AILastUpdated.HasValue)
            {
                var age = DateTime.UtcNow - CurrentImage.MetaData.AILastUpdated;

                return age.Value.ToHumanReadableString() + " ago";
            }

            return "Never";
        }
    }

    public async Task RefreshThumb()
    {
        await thumbService.MarkImagesForScan(new List<Image> { CurrentImage });
    }

    public async Task RefreshAI()
    {
        await aiService.MarkImagesForScan(new List<Image> { CurrentImage });
    }
}
