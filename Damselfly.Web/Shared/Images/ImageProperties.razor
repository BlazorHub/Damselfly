
@using Damselfly.Web.Shared.Images

@inject ThumbnailService thumbService
@inject IndexingService indexService
@inject BasketService basketService
@inject SearchService searchService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject UserConfigService configService
@inject UserService userService
@inject ImageRecognitionService aiService
@inject ExifService exifService

@inject IJSRuntime JsRuntime
@implements IDisposable

@if (CurrentImage == null)
{
    <div class="damselfly-imageproperties">
        <p><em>Loading image properties...</em></p>
    </div>
}
else
{
<div class="damselfly-imageproperties">
    @if (basketService.CurrentBasket != null)
    {
        <div>Add to @basketService.CurrentBasket.Name: <input class="damselfly-checkbox" type="checkbox" @bind="@InBasket" /></div>
    }

    <ImageField FieldName="Date Taken" FieldValue="@CurrentImage.SortDate.Display()" />
    <ImageField FieldName="Filename" FieldValue="@CurrentImage.FileName" />
    <ImageField FieldName="Folder" FieldValue="@CurrentImage.Folder.Name" Title="@CurrentImage.Folder.Path" Href="@CurrentFolderLink" />

    @if (CurrentImage.MetaData != null)
    {
        <ImageField FieldName="Description" FieldValue="@CurrentImage.MetaData.Description" />
        <ImageField FieldName="Caption" FieldValue="@CurrentImage.MetaData.Caption" />
        <ImageField FieldName="Copyright" FieldValue="@CurrentImage.MetaData.Copyright" />
        <ImageField FieldName="Credit" FieldValue="@CurrentImage.MetaData.Credit" />
        <ImageField FieldName="Description" FieldValue="@CurrentImage.MetaData.Description" />
        <div title="@RatingTitle">
            <label class="imagefield-label" title="Rating">Rating:</label>
            <MudRating SelectedValue="CurrentImage.MetaData.Rating" Color="Color.Primary"
                       SelectedValueChanged="OnRatingChanged" Disabled="@(!CanEdit)" />
        </div>
        <ImageField FieldName="Size" FieldValue="@Size" />
        <ImageField FieldName="Camera" FieldValue="@Camera" />
        <ImageField FieldName="Lens" FieldValue="@Lens" />
        <ImageField FieldName="ISO" FieldValue="@CurrentImage.MetaData.ISO" />
        <ImageField FieldName="Aperture" FieldValue="@Aperture" />
        <ImageField FieldName="Exposure" FieldValue="@Exposure" />
        <ImageField FieldName="GeoLocation" FieldValue="@Location" />

        if (!string.IsNullOrEmpty(CurrentImage.MetaData.DominantColor))
        {
            <div>
                <label title="Dominant Color">
                    Colors:
                </label>
                <div>
                    <div title="Dominant Colour" class="dominant-color" style="@DominantColorStyle" />
                    <div title="Average Colour" class="dominant-color" style="@AverageColorStyle" />
                </div>
            </div>
        }
    }
    else
    {
        <div>No metadata available yet.</div>
    }
    @if (Expanded)
    {
        <div @onclick="@(() => CollapseDisplay())">
            Show Less... &nbsp;<i class="fas fa-chevron-up" />
        </div>
    }
    else
    {
        <div @onclick="@(() => ExpandDisplay())">
            Show More... &nbsp; <i class="fas fa-chevron-down" />
        </div>
    }
    @if (Expanded)
    {
        <ImageField FieldName="File Modified" FieldValue="@CurrentImage.FileLastModDate.Display()" />
        <div>
            <ImageField FieldName="Thumbs Generated" FieldValue="@ThumbnailUpdate" />
            <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
                <ToolbarButton IconStyle="fa-sync-alt" OnClickCallback="@RefreshThumb" title="Regenerate thumbnail" />
            </AuthorizeView>
        </div>
        <ImageField FieldName="Metadata Scanned:" FieldValue="@MetadataScanDate" />
        <div>
            <ImageField FieldName="AI Processed" FieldValue="@AIProcessDate" />
            <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
                <ToolbarButton IconStyle="fa-sync-alt" OnClickCallback="@RefreshAI" title="Re-run AI processing" />
            </AuthorizeView>
        </div>

        @if (CurrentImage.Hash != null)
        {
            <ImageField FieldName="Hash" FieldValue="@CurrentImage.Hash.MD5ImageHash" />
        }
    }
</div>
}

@code {
    private Image theImage;
    public Image CurrentImage { get { return theImage; } set { theImage = value; } }
    public string CurrentFolderLink => $"/?folderId={CurrentImage.Folder.FolderId}";
    public string Size => $"{CurrentImage.MetaData.Width} x {CurrentImage.MetaData.Height}";
    public string Camera => CurrentImage.MetaData.Camera != null ? $"{CurrentImage.MetaData.Camera.Make} {CurrentImage.MetaData.Camera.Model}" : string.Empty;
    public string Lens => CurrentImage.MetaData.Lens != null ? $"{CurrentImage.MetaData.Lens.Make} {CurrentImage.MetaData.Lens.Model}" : string.Empty;
    public string Exposure => !string.IsNullOrEmpty(CurrentImage.MetaData.Exposure) ? ($"{CurrentImage.MetaData.Exposure} {(CurrentImage.MetaData.FlashFired ? "(flash)" : string.Empty)}") : string.Empty;
    public string Aperture => !string.IsNullOrEmpty(CurrentImage.MetaData.FNum) ? $"f{CurrentImage.MetaData.FNum}" : string.Empty;
    public string AverageColorStyle => $"background-color:{CurrentImage.MetaData.AverageColor}";
    public string DominantColorStyle => $"background-color:{CurrentImage.MetaData.DominantColor}";
    public string Location => CurrentImage.MetaData.Latitude.HasValue ? $"{CurrentImage.MetaData.Latitude:n6}, {CurrentImage.MetaData.Longitude:n6}" : String.Empty;
    public string RatingTitle => CurrentImage.MetaData?.Rating == 0 ? "Unrated" : $"Rating: {CurrentImage.MetaData?.Rating} stars";
    private bool Expanded { get; set; }
    private bool CanEdit = false;

    private void ExpandDisplay()
    {
        Expanded = true;
        configService.Set("ShowExtendedProps", Expanded.ToString());
    }

    private void CollapseDisplay()
    {
        Expanded = false;
        configService.Set("ShowExtendedProps", Expanded.ToString());
    }

    private async Task OnRatingChanged(int newValue)
    {
        if (newValue != CurrentImage.MetaData.Rating)
        {
            var db = new ImageContext();
            var metadata = CurrentImage.MetaData;
            db.Attach(metadata);
            metadata.Rating = newValue;
            db.Update(metadata);
            await db.SaveChangesAsync("UpdateRating");

            // Schedule the change to be written to the EXIF Data of the image.
            exifService.SetExifFieldAsync(new[] { CurrentImage }, ExifOperation.ExifType.Rating, newValue.ToString(), userService.User);
        }
    }

    public bool InBasket
    {
        get { return basketService.IsSelected(CurrentImage); }
        set { _ = SetBasketState(value); }
    }

    private async Task SetBasketState(bool newState)
    {
        await basketService.SetBasketState(new[] { CurrentImage }, newState);
        searchService.NotifyStateChanged();
        // Notify the image list that the selection has changed
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        CanEdit = await userService.PolicyApplies(PolicyDefinitions.s_IsEditor);

        Expanded = configService.GetBool("ShowExtendedProps", false);

        if (!Expanded)
            CollapseDisplay();

        navContext.OnChange += NavigationChanged;
        basketService.OnBasketChanged += BasketStateChanged;
    }

    public void Dispose()
    {
        navContext.OnChange -= NavigationChanged;
        basketService.OnBasketChanged -= BasketStateChanged;
    }

    protected void BasketStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }


    protected void NavigationChanged(Image image)
    {
        if (CurrentImage == null || image == null || image.ImageId != CurrentImage.ImageId)
        {
            CurrentImage = image;
            InvokeAsync(StateHasChanged);
            if (CurrentImage != null)
                Logging.LogVerbose($"ImageProperties: Set current image to {CurrentImage.ImageId} ({CurrentImage.FileName})");
        }
    }

    public string ThumbnailUpdate
    {
        get
        {
            if (CurrentImage != null && CurrentImage.MetaData != null && CurrentImage.MetaData.ThumbLastUpdated.HasValue)
            {
                var age = DateTime.UtcNow - CurrentImage.MetaData.ThumbLastUpdated;

                return age.Value.ToHumanReadableString() + " ago";
            }

            return "Never";
        }
    }

    public string AIProcessDate
    {
        get
        {
            if (CurrentImage != null && CurrentImage.MetaData != null && CurrentImage.MetaData.AILastUpdated.HasValue)
            {
                var age = DateTime.UtcNow - CurrentImage.MetaData.AILastUpdated;

                return age.Value.ToHumanReadableString() + " ago";
            }

            return "Never";
        }
    }

    public string MetadataScanDate
    {
        get
        {
            if (CurrentImage != null && CurrentImage.MetaData != null && CurrentImage.MetaData.LastUpdated != DateTime.MinValue)
            {
                var age = DateTime.UtcNow - CurrentImage.MetaData.LastUpdated;

                return age.ToHumanReadableString() + " ago";
            }

            return "Never";
        }
    }

    public async Task RefreshThumb()
    {
        await thumbService.MarkImagesForScan(new List<Image> { CurrentImage });
    }

    public async Task RefreshAI()
    {
        await aiService.MarkImagesForScan(new List<Image> { CurrentImage });
    }
}
