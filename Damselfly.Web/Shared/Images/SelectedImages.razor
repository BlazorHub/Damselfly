
@using Damselfly.Core.ImageProcessing

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject BasketService basketService
@inject NavigationManager NavigationManager
@inject WordpressService wpService;
@implements IDisposable
@inherits ImageGridBase

@if (gridImages == null)
{
    <div class="damselfly-selectedimages">
        <p><em>Loading selection...</em></p>
    </div>
}
else
{
    <div class="damselfly-selectedimages">
        @if (!gridImages.Any())
        {
            <p><em>No images in basket.</em></p>
        }
        else
        {
            @for(int i = 0; i < gridImages.Count; i++ )
            {
                var info = new SelectionInfo { image = gridImages[i], index = i };
                <div class="damselfly-gridimage wrapping-table-mini" @onclick="@(e => { ToggleSelected( e, info ); })">
                    <GridImage CurrentImage=@info.image NavContext=@NavigationContexts.Basket DisplayFileName=@false ThumbnailSize=ThumbSize.Small />
                </div>
            }
        }
    </div>
}

<BasketManager />

<div class="selection-toolbar">
    @if (gridImages != null && gridImages.Any())
    {
        @if (ShowDownLoadButton)
        {
            <button title="Export basket images" @onclick="@(() => ShowDownloads())" class="btn btn-primary">
                <i class="fa fa-download" />
                &nbsp;Download
            </button>
        }
        @if (ShowDownLoadButton)
        {
            <button title="Clear Basket" @onclick="@(() => basketService.Clear())" class="btn btn-primary">
                <i class="fas fa-shopping-basket" />
                &nbsp;Clear
            </button>
        }
        @if (ShowDownLoadButton)
        {
            <button title="Upload To Wordpress" @onclick="@(() => UploadToWordPress())" class="btn btn-primary">
                <i class="fab fa-wordpress" />
                &nbsp;Upload to WP
            </button>
        }
    }
    @if (SelectionService.Instance.Selection.Any())
    {
        <button @onclick="AddSelectedToBasket" class="btn btn-primary">
            <i class="fas fa-shopping-basket" />
            &nbsp;Add Images
        </button>
    }
</div>

@code {
    readonly List<Basket> baskets = new List<Basket>();
    bool AddingBasket { get; set; }
    string NewBasketName { get; set; }

    [Parameter]
    public bool ShowDownLoadButton { get; set; } = true;

    [Parameter]
    public bool ShowTags { get; set; } = true;

    public bool ShowClearButton { get { return gridImages.Any(); } set { } }

    void AddSelectedToBasket()
    {
        var selected = SelectionService.Instance.Selection.ToList();
        BasketService.Instance.SetBasketState(selected, true);

        StatusService.Instance.StatusText = $"{selected.Count()} images added to the basket";
    }

    private void SaveBasket()
    {
        basketService.CreateAndSelectNewBasket(NewBasketName);

        AddingBasket = false;
        SelectedImagesChanged();
        StateHasChanged();
    }

    private void CancelAdding()
    {
        AddingBasket = false;
        StateHasChanged();
    }

    private void AddBasket()
    {
        AddingBasket = true;
        StateHasChanged();
    }

    private void BasketChanged(ChangeEventArgs e)
    {
        basketService.LoadBasket(e.Value.ToString());
    }

    private void UploadToWordPress()
    {
        _ = wpService.UploadBasketToWordpress();
    }

    private void ShowDownloads()
    {
        try
        {
            NavigationManager.NavigateTo("/export");
        }
        catch (Exception ex)
        {
            Logging.LogError("Exception: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            basketService.OnChange += BasketImagesChanged;
            SelectionService.Instance.OnSelectionChanged += SelectedImagesChanged;
            await LoadData();
        }
    }

    public void Dispose()
    {
        basketService.OnChange -= BasketImagesChanged;
        SelectionService.Instance.OnSelectionChanged -= SelectedImagesChanged;
    }

    protected void SelectedImagesChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    protected void BasketImagesChanged()
    {
        // Marshall onto the dispatcher thread
        _ = LoadData();
    }

    public async Task LoadData()
    {
        var watch = new Stopwatch("SelectedLoadData");
        gridImages.Clear();
        gridImages.AddRange(basketService.SelectedImages);
        watch.Stop();

        using var db = new ImageContext();
        // TODO: Do we need to load this every time?
        this.baskets.Clear();
        this.baskets.AddRange(db.Baskets);

        await InvokeAsync(StateHasChanged);
    }
}

