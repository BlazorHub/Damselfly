
@using Damselfly.Core.ImageProcessing
@using Damselfly.Core.DbModels

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject BasketService basketService
@inject NavigationManager NavigationManager
@inject WordpressService wpService
@inject UserStatusService statusService
@inject IDialogService DialogService

@implements IDisposable
@inherits ImageGridBase

@if (gridImages == null)
{
    <div class="damselfly-selectedimages">
        <p><em>Loading selection...</em></p>
    </div>
}
else
{
    <div class="damselfly-selectedimages">
        @if (!gridImages.Any())
        {
            <p><em>No images in basket.</em></p>
        }
        else
        {
            @for (int i = 0; i < gridImages.Count; i++)
            {
                var info = new SelectionInfo { image = gridImages[i], index = i };
                <div class="damselfly-gridimage wrapping-table-mini" @onclick="@(e => { ToggleSelected( e, info ); })">
                    <GridImage CurrentImage=@info.image NavContext=@NavigationContexts.Basket DisplayFileName=@false ThumbnailSize=ThumbSize.Small />
                </div>
            }
        }
    </div>
}

<div class="damselfly-basketmanager">
    <BasketManager />

    <div class="damselfly-imagebuttons">
        <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
            <ToolbarButton IconStyle="fa-times-circle" OnClickCallback="@(()=>basketService.Clear())" Enabled="@BasketHasImages" title="Clear Basket" />
            <ToolbarButton IconStyle="fa-copy" OnClickCallback="@BasketCopy" Enabled="@BasketHasImages" title="Copy/Move to another basket" />
        </AuthorizeView>
        <AuthorizeView Policy="@PolicyDefinitions.s_IsDownloader">
            <ToolbarButton IconStyle="fa-download" OnClickCallback="@ShowDownloads" Enabled="@BasketHasImages" title="Export/Download" />
            <ToolbarButton StyleGroup="fab" IconStyle="fa-wordpress-simple" OnClickCallback="@UploadToWordPress" Enabled="@BasketHasImages" title="Upload to Wordpress" />
        </AuthorizeView>

    </div>
    </div>

    @code {
        [Parameter]
        public bool ShowTags { get; set; } = true;

        public bool BasketHasImages => gridImages.Any();

        private void UploadToWordPress()
        {
            _ = wpService.UploadBasketToWordpress(basketService.BasketImages);
        }

        private async Task BasketCopy()
        {
            var dialog = DialogService.Show<BasketMoveDialog>("Copy/Move to Basket");
            var result = await dialog.Result;
        }

        private void ShowDownloads()
        {
            try
            {
                NavigationManager.NavigateTo("/export");
            }
            catch (Exception ex)
            {
                Logging.LogError("Exception: " + ex.Message);
            }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                basketService.OnBasketChanged += BasketImagesChanged;
                selectionService.OnSelectionChanged += SelectedImagesChanged;
                await LoadData();
            }
        }

        public void Dispose()
        {
            basketService.OnBasketChanged -= BasketImagesChanged;
            selectionService.OnSelectionChanged -= SelectedImagesChanged;
        }

        protected void SelectedImagesChanged()
        {
            InvokeAsync(StateHasChanged);
        }

        protected void BasketImagesChanged()
        {
            // Marshall onto the dispatcher thread
            _ = LoadData();
        }

        public async Task LoadData()
        {
            var watch = new Stopwatch("SelectedLoadData");
            gridImages.Clear();
            gridImages.AddRange(basketService.BasketImages);
            watch.Stop();

            await InvokeAsync(StateHasChanged);
        }
    }

