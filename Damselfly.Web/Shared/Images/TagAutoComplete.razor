@using System.Linq
@using Damselfly.Web.Data
@using Damselfly.Core.Services
@using Blazored.Typeahead

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService iptcService
@inject IndexingService indexService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ContextMenuService contextMenuService

<div class="InputAddOn">
    <div class="InputAddOn-item" title="Add Tags/Keywords"><i class="fa fa-tag" /></div>
    <BlazoredTypeahead Disabled="@IsDisabled" class="InputAddOn-field" SearchMethod="SearchTags" 
                       placeholder="Add a keyword" Debounce="250" @bind-Value="@TypeAheadTag"
                       AddItemOnEmptyResultMethod="AddNewItem" >
        <SelectedTemplate>
            @context Saved
        </SelectedTemplate>
        <ResultTemplate>
            @context
        </ResultTemplate>
        <NotFoundTemplate>
            @context
        </NotFoundTemplate>
    </BlazoredTypeahead>
</div>

@code {
            [Parameter]
            public string TypeAheadTag { get; set; }

            [Parameter]
            public bool IsDisabled { get; set; } = false;

            [Parameter]
            public Func<string, Task<string>> OnAddNewtag { private get; set; }

    protected override void OnParametersSet()
    {
        // TODO https://github.com/dotnet/aspnetcore/issues/11815
        if (OnAddNewtag == null)
            throw new ArgumentException("No callback specified for OnAddNewTag!");

        base.OnParametersSet();
    }

    private async Task<string> AddNewItem( string newTag )
    {
        if (!string.IsNullOrEmpty(newTag))
        {
            Logging.Log("Saving new tag: " + newTag);

            // Call the callback
            await OnAddNewtag(newTag);

            return newTag;
        }

        return string.Empty;
    }

    private async Task<IEnumerable<string>> SearchTags(string text)
    {
        // Only query the DB if we have more than 2 chars.
        if (text.Length > 1)
        {
            return await Task.FromResult(indexService.CachedTags
                                    .Where(x => x.Keyword.Contains(text.Trim(), StringComparison.OrdinalIgnoreCase))
                                    .Select(t => t.Keyword)
                                    .OrderBy(x => x.ToUpper().IndexOf(text.ToUpper()))
                                    .ThenBy(x => x, StringComparer.OrdinalIgnoreCase)
                                    .ToList());
        }

        return new List<string>();
    }
}
