
@using Damselfly.Core.ImageProcessing

@inject ThumbnailService thumbService
@inject NavigationManager NavigationManager
@inject NavigationService navContext

<!--ContextMenu Id="ImageMenu">
    <Item OnClick="@OnClick">View</Item>
    <Seperator />
    <Item OnClick="@OnClick">Add to Basket</Item>
    <Item OnClick="@OnClick">Download</Item>
    <Seperator />
    <Item OnClick="@OnClick">Refresh Thumbnail</Item>
</ContextMenu-->


@if (CurrentImage == null)
{
    <p><em>Loading image...</em></p>
}
else
{
        <ContextMenuTrigger MenuId="ImageMenu">
        <div class="grid-image" @ondblclick="NavigateToImage">
            @if (!string.IsNullOrEmpty(ImageUrl))
            {
                <img @key="CurrentImage.ImageId" class="@SelectStyle" title="@CurrentImage.FileName" src="@ImageUrl">
                <input class="grid-checkbox damselfly-checkbox" type="checkbox" @bind="@InBasket">
            }
        </div>
        @if (DisplayFileName)
        {
            <div class="grid-text">
                @CurrentImage.FileName
            </div>
        }

        </ContextMenuTrigger>
}

@code
{
    [Parameter]
    public NavigationContexts NavContext { get; set; }

    [Parameter]
    public Image CurrentImage { get; set; }

    [Parameter]
    public bool DisplayFileName { get; set; } = false;

    [Parameter]
    public ThumbSize ThumbnailSize { get; set; } = ThumbSize.Small;

    public bool InBasket
    {
        get { return BasketService.Instance.IsSelected(CurrentImage); }
        set
        {
            BasketService.Instance.SetBasketState(CurrentImage, value);
            // Notify the image list that the selection has changed
            SearchService.Instance.NotifyStateChanged();
        }
    }

    string ImageUrl { get; set; } = null;
    string SelectStyle { get { return SelectionService.Instance.IsSelected( CurrentImage ) ? "grid-image-selected" : "grid-image-unselected"; } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Could use the following:
            //   ImageUrl = $"/thumb/{ThumbnailSize}/{CurrentImage.Image.ImageId}";
            // but it's an order of magnitude slower (probably because the controller
            // has to hit the DB etc)
            ImageUrl = await Task.FromResult<string>(ImageService.GetImageThumbUrl(CurrentImage, ThumbnailSize));

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        ImageUrl = await Task.FromResult<string>(ImageService.GetImageThumbUrl(CurrentImage, ThumbnailSize));
    }

    void OnClick(ItemClickEventArgs e)
    {
        Logging.Log($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    }

    void NavigateToImage()
    {
        navContext.Context = NavContext;
        NavigationManager.NavigateTo("/image/" + CurrentImage.ImageId);
    }
}
