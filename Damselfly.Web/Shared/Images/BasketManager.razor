
@using Damselfly.Core.ImageProcessing
@implements IDisposable

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject BasketService basketService
@inject NavigationManager NavigationManager
@inject WordpressService wpService
@inject UserService userService   

<div class="InputAddOn">
    <div class="InputAddOn-item" title="Saved Baskets"><i class="fas fa-shopping-basket" /></div>
    @if (!AddingBasket)
    {
        <select @onchange="BasketChanged" class="InputAddOn-field">
            @foreach (var basket in baskets)
            {
                <option value="@basket.Name">@basket.Name</option>
            }
        </select>
        <button title="Add Basket" @onclick="@(() => AddBasket())" class="InputAddOn-item"><i class="fa fa-plus-circle" /></button>
    }
    else
    {
        <input placeholder="Basket Name" class="InputAddOn-field" @bind-value="NewBasketName" @bind-value:event="oninput" />
        <button class="InputAddOn-item" title="Save Basket" @onclick="@(() => SaveBasket())"><i class="fa fa-save" /></button>
        <button class="InputAddOn-item" title="Cancel Adding" @onclick="@(() => CancelAdding())"><i class="fa fa-times-circle" /></button>
    }
</div>

@code {
    readonly List<Basket> baskets = new List<Basket>();
    bool AddingBasket { get; set; }
    string NewBasketName { get; set; }

    private void SaveBasket()
    {
        AddingBasket = false;

        basketService.CreateAndSelectNewBasket(NewBasketName, userService.User);

        StateHasChanged();
    }

    private void CancelAdding()
    {
        AddingBasket = false;
        StateHasChanged();
    }

    private void AddBasket()
    {
        AddingBasket = true;
        StateHasChanged();
    }

    private void BasketChanged(ChangeEventArgs e)
    {
        basketService.LoadBasket(e.Value.ToString());
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            basketService.OnChange += BasketsChanged;

            await LoadData();
        }
    }

    public void Dispose()
    {
        basketService.OnChange -= BasketsChanged;
    }

    private void BasketsChanged()
    {
        _ = LoadData();
    }

    public async Task LoadData()
    {
        var watch = new Stopwatch("LoadBaskets");

        var myBaskets = await basketService.GetUserBaskets( userService.User );

        this.baskets.Clear();
        this.baskets.AddRange( myBaskets );
        watch.Stop();

        await InvokeAsync(StateHasChanged);
    }
}

