
@using Damselfly.Core.ImageProcessing
@using Damselfly.Core.DbModels
 
@implements IDisposable

@inject ImageService imageService
@inject IDialogService DialogService
@inject ThumbnailService thumbService
@inject BasketService basketService
@inject NavigationManager NavigationManager
@inject WordpressService wpService
@inject UserService userService

<div class="InputAddOn">
    <div class="InputAddOn-item" title="Saved Baskets"><i class="fas fa-shopping-basket" /></div>
    <select @bind="SelectedBasketName" class="InputAddOn-field">
        @foreach (var basket in baskets)
        {
            <option value="@basket.Name">@basket.Name @PrivateIndicator(basket)</option>
        }
    </select>
    <AuthorizeView Policy="@PolicyDefinitions.s_IsEditor">
        <button title="Edit Basket" @onclick="@(() => OpenEditBasketDialog())" class="InputAddOn-item"><i class="fas fa-edit" /></button>
        <button title="Add Basket" @onclick="@(() => OpenAddBasketDialog())" class="InputAddOn-item"><i class="fa fa-plus-circle" /></button>
    </AuthorizeView>
</div>

@code {
    readonly List<Basket> baskets = new List<Basket>();
    string NewBasketName { get; set; }

    private string SelectedBasketName
    {
        get { return basketService.CurrentBasket?.Name;  }
        set { basketService.SwitchBasket(value, userService.User); }
    }

    private async Task OpenAddBasketDialog()
    {
        var newBasket = new Basket { Name = "New Basket", UserId = userService.User?.Id };

        var parameters = new DialogParameters { { "basket", newBasket }, { "mode", "Add" } };
        var dialog = DialogService.Show<BasketDialog>("Add New Basket", parameters);
        var result = await dialog.Result;

    }

    private async Task OpenEditBasketDialog()
    {
        var parameters = new DialogParameters { { "basket", basketService.CurrentBasket }, { "mode", "Edit" } };
        var dialog = DialogService.Show<BasketDialog>("Edit Basket", parameters);
        var result = await dialog.Result;
    }


    private string PrivateIndicator(Basket basket)
    {
        if (basket?.UserId == null)
            return "(public)";

        return string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            basketService.OnBasketChanged += BasketsChanged;

            await LoadBasketList();
        }
    }

    public void Dispose()
    {
        basketService.OnBasketChanged -= BasketsChanged;
    }

    private void BasketsChanged()
    {
        _ = LoadBasketList();
    }

    public async Task LoadBasketList()
    {
        var watch = new Stopwatch("LoadBaskets");

        var myBaskets = await basketService.GetUserBaskets(userService.User);

        this.baskets.Clear();
        this.baskets.AddRange(myBaskets);
        watch.Stop();

        await InvokeAsync(StateHasChanged);
    }
}

