@using System.Linq
@using Damselfly.Web.Data
@using Damselfly.Core.Services
@using Humanizer

@inject IJSRuntime JsRuntime
@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService iptcService
@inject SelectionService selectionService
@inject IndexingService indexService
@inject MetaDataService metadataService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ContextMenuService contextMenuService

@implements IDisposable

<div class="damselfly-taglist">
    @if (ShowAddKeywords)
    {
        <TagAutoComplete OnAddNewtag="@CreateNewTag" IsDisabled="@IsDisabled" />
    }

    @if (ShowFavourites)
    {
        <div class="damselfly-keywordlist">
            @if (iptcService.FavouriteTags != null && iptcService.FavouriteTags.Any())
            {
                @foreach (var tag in iptcService.FavouriteTags)
                {
                    @if (CurrentImages != null && CurrentImages.Any())
                    {
                        <div class="damselfly-keyword damselfly-addfavekeyword"
                             @onclick="@(() => QuickAddTag(tag))"
                             @oncontextmenu=@(args => ShowContextMenu(args, tag, true)) @oncontextmenu:preventDefault="true">
                            <div class="damselfly-addtag" title="Add @tag.Keyword to Selection"><i class="fa fa-plus-circle" /></div>
                            <div title="Add @tag.Keyword to image" class="damselfly-keywordtext">@tag.Keyword</div>
                        </div>
                    }
                    else
                    {
                        <div class="damselfly-keyword damselfly-addfavekeyword"
                             @oncontextmenu=@(args => ShowContextMenu(args, tag, true )) @oncontextmenu:preventDefault="true">
                            <div title="Add @tag.Keyword to Selection" class="damselfly-keywordtext-disabled">@tag.Keyword</div>
                        </div>
                    }
                }
            }
        </div>
    }

    @if (ShowImageKeywords)
    {
        <div class="damselfly-keywordlist">
            @if (CurrentImages != null && CurrentImages.Any())
            {
                @if ((theImageTags != null && theImageTags.Any()) ||
                    (theObjectTags != null && theObjectTags.Any()) )
                {
                    @foreach (var tag in theImageTags)
                    {
                        <div class="damselfly-keyword" @oncontextmenu=@(args => ShowContextMenu(args, tag, false)) @oncontextmenu:preventDefault="true">
                            <div class="damselfly-favouritetag" title="Favourite" @onclick="@(async () => await iptcService.ToggleFavourite(tag))">
                                @if (tag.Favourite)
                                {
                                    <i class="fas fa-star" />
                                }
                                else
                                {
                                    <i class="far fa-star" />
                                }
                            </div>
                            <div class="damselfly-keywordtext">@tag.Keyword</div>
                            <div class="damselfly-deletetag" title="Remove Tag" @onclick="@(() => DeleteTag(tag))"><i class="fa fa-times-circle" /></div>
                        </div>
                    }

                    @foreach (var obj in theObjectTags)
                    {
                        <div class="damselfly-keyword">
                            @if (obj.IsFace)
                            {
                                <div class="damselfly-favouritetag" title="Detected Face">
                                    <i class="fas fa-user" />
                                </div>
                            }
                            else
                            {
                                <div class="damselfly-favouritetag" title="Detected Object">
                                    <i class="fas fa-lightbulb" />
                                </div>
                            }
                            <div class="damselfly-keywordtext">@obj.GetTagName()</div>
                        </div>
                    }
                }
                else
                {
                    <div>No Keywords</div>
                }
            }
            else
            {
                <div>No Images Selected</div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool ShowFavourites { get; set; }

    [Parameter]
    public bool ShowAddKeywords { get; set; }

    [Parameter]
    public bool ShowImageKeywords { get; set; }

    [Parameter]
    public Image[] CurrentImages { get; set; }

    [Parameter]
    public bool TrackSelection { get; set; }

    private IList<Tag> theImageTags { get; set; }
    private IList<ImageObject> theObjectTags { get; set; }
    public bool IsDisabled { get { return CurrentImages == null || !CurrentImages.Any(); } }

    private async Task<string> CreateNewTag(string tagToAdd)
    {
        Logging.Log($"Creating tag for {tagToAdd}...");

        // If multiple tags have been added, split them and add individually.
        var addedTags = tagToAdd.Split(',').Select(x => x.Trim()).ToList();

        await iptcService.UpdateTagsAsync(CurrentImages, addedTags, null);

        StateHasChanged();
        return tagToAdd;
    }

    private void QuickAddTag(Tag tag)
    {
        var tagsToAdd = new List<string> { tag.Keyword };
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, tagsToAdd, null); });
        StateHasChanged();
    }

    private void DeleteTag(Tag tag)
    {
        Logging.Log($"Tag {tag} removed");

        // TODO: Fix this async mess
        var tagToDelete = new List<string> { tag.Keyword };
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, null, tagToDelete); });

        // Now store the state
        theImageTags.Remove(tag);

        StateHasChanged();
    }

    private IList<Tag> GetImageTags()
    {
        if (CurrentImages != null)
        {
            try
            {
                var tagLists = CurrentImages.Select(x => x.ImageTags.Select(t => t.Tag));

                if (tagLists.Count() > 1)
                {
                    return tagLists.Aggregate((x, y) => x.Intersect(y))
                               .OrderBy(x => x.Keyword)
                               .ToList();
                }
                else if (tagLists.Count() == 1)
                {
                    return tagLists.FirstOrDefault()
                                   .OrderBy(x => x.Keyword)
                                   .ToList();
                }
            }
            catch (Exception ex)
            {
                Logging.Log($"Unable to get common tags: {ex}");
            }
        }

        return new Tag[0];
    }

    private IList<ImageObject> GetObjectTags()
    {
        if (CurrentImages != null)
        {
            try
            {
                using var db = new ImageContext();

                var tagLists = CurrentImages.SelectMany(x => x.ImageObjects)
                                            .ToArray();

                return tagLists;
            }
            catch (Exception ex)
            {
                Logging.Log($"Unable to get object tags: {ex}");
            }
        }

        return new List<ImageObject>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (TrackSelection)
        {
            // TODO: Dispose
            selectionService.OnSelectionChanged += SelectionChanged;
            metadataService.OnFavouritesChanged += FavouritesChanged;
            SelectionChanged();
        }
        else
        {
            await OnParametersSetAsync();
        }
    }

    protected override void OnInitialized()
    {
        navContext.OnChange += NavigationChanged;
    }

    protected void NavigationChanged(Image image)
    {
        var images = new Image[0];

        if (image != null)
            images = new[] { image };

        CurrentImages = images;

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    public void Dispose()
    {
        selectionService.OnSelectionChanged -= SelectionChanged;
        metadataService.OnFavouritesChanged -= FavouritesChanged;
        navContext.OnChange += NavigationChanged;
    }

    protected void SelectionChanged()
    {
        this.CurrentImages = selectionService.Selection.ToArray();

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    protected void FavouritesChanged()
    {
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(RefreshTagsForSelection);
    }

    private void RefreshTagsForSelection()
    {
        using var db = new ImageContext();

        // Enrich all the images with their with their tags
        foreach (var img in CurrentImages)
            db.LoadTags(img);

        theImageTags = GetImageTags();
        theObjectTags = GetObjectTags();
        InvokeAsync(StateHasChanged);
    }

    void ShowContextMenu(MouseEventArgs args, Tag tag, bool favourite)
    {
        var menuList = new List<ContextMenuItem>() {
                new ContextMenuItem(){ Text = "View Tag", Value = 0 },
                new ContextMenuItem(){ Text = (tag.Favourite ? "Remove from" : "Add to") + " Favourites", Value = 1 }
        };

        if (CurrentImages != null && CurrentImages.Any())
        {
            if (favourite)
                menuList.Insert(0, new ContextMenuItem { Text = "Add Tag to Selection", Value = 2 });
            else
                menuList.Insert(0, new ContextMenuItem { Text = "Remove Tag from Selection", Value = 3 });
        }

        contextMenuService.Open(args, menuList, (args) =>
        {
            contextMenuService.Close();
            switch (args.Value)
            {
                case 0: NavigationManager.NavigateTo("/tag/" + tag.Keyword); break;
                case 1: _ = iptcService.ToggleFavourite(tag); break;
                case 2: QuickAddTag(tag); break;
                case 3: DeleteTag(tag); break;
            }
        });
    }

}
