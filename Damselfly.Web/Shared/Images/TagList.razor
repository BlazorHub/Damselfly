@using System.Linq
@using Damselfly.Web.Data
@using Damselfly.Core.Services

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService iptcService
@inject IndexingService indexService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ContextMenuService contextMenuService
@implements IDisposable

<div class="damselfly-taglist">
    @if (ShowAddKeywords)
    {
        <TagAutoComplete OnAddNewtag="@CreateNewTag" IsDisabled="@IsDisabled" />
    }

    @if (ShowFavourites)
    {
        <div class="damselfly-keywordlist">
            @if (iptcService.FavouriteTags != null && iptcService.FavouriteTags.Any())
            {
                @foreach (var tag in iptcService.FavouriteTags)
                {
                    <div class="damselfly-keyword">
                        <div class="damselfly-favouritetag" title="Remove favourite" @onclick="@(async () => await iptcService.ToggleFavourite(tag))"><i class="fas fa-star" /></div>
                        @if (CurrentImages != null && CurrentImages.Any())
                        {
                            <div @onclick="@(() => QuickAddTag(tag))" title="Add @tag.Keyword to image" class="damselfly-keywordtext">@tag.Keyword</div>
                        }
                        else
                        {
                            <div title="Add @tag.Keyword to image" class="damselfly-keywordtext-disabled">@tag.Keyword</div>
                        }
                    </div>
                }
            }
        </div>
    }

    @if (ShowImageKeywords)
    {
        <div class="damselfly-keywordlist">
            @if (CurrentImages != null && CurrentImages.Any())
            {
                @foreach (var tag in theImageTags)
                {
                    <div class="damselfly-keyword" @oncontextmenu=@(args => ShowContextMenu(args, tag)) @oncontextmenu:preventDefault="true">
                        <div class="damselfly-favouritetag" title="Favourite" @onclick="@(async () => await iptcService.ToggleFavourite(tag))">
                            @if (tag.Favourite)
                            {
                                <i class="fas fa-star" />
                            }
                            else
                            {
                                <i class="far fa-star" />
                            }
                        </div>
                        <div class="damselfly-keywordtext">@tag.Keyword</div>
                        <div class="damselfly-deletetag" title="Remove Tag" @onclick="@(() => DeleteTag(tag))"><i class="fa fa-times-circle" /></div>
                    </div>
                }
            }
            else
            {
                <div>No Keywords</div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool ShowFavourites { get; set; }

    [Parameter]
    public bool ShowAddKeywords { get; set; }

    [Parameter]
    public bool ShowImageKeywords { get; set; }

    [Parameter]
    public Image[] CurrentImages { get; set; }

    [Parameter]
    public bool TrackSelection { get; set; }

    private IList<Tag> theImageTags { get; set; }
    public bool IsDisabled { get { return CurrentImages == null || !CurrentImages.Any(); } }

    private async Task<IList<Tag>> LoadImageTagsAsync()
    {
        return await Task.FromResult(GetImageTags()
                                        .OrderBy(x => x.Keyword)
                                        .ToList());
    }

    private void CreateNewTag(string tagToAdd)
    {
        Logging.Log($"Creating tag for {tagToAdd}...");

        // If multiple tags have been added, split them and add individually.
        var addedTags = tagToAdd.Split(',').Select(x => x.Trim()).ToList();

        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, addedTags, null); });
        StateHasChanged();
    }

    private void QuickAddTag(Tag tag)
    {
        var tagsToAdd = new List<string> { tag.Keyword };
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, tagsToAdd, null); });
        StateHasChanged();
    }

    private void DeleteTag(Tag tag)
    {
        Logging.Log($"Tag {tag} removed");

        // TODO: Fix this async mess
        var tagToDelete = new List<string> { tag.Keyword };
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, null, tagToDelete); });

        // Now store the state
        theImageTags.Remove(tag);

        StateHasChanged();
    }

    private IList<Tag> GetImageTags()
    {
        if (CurrentImages != null)
        {
            try
            {
                using var db = new ImageContext();

                // Enrich all the images with their with their tags
                foreach (var img in CurrentImages)
                    db.LoadTags(img);

                var tagLists = CurrentImages.Select(x => x.ImageTags.Select(t => t.Tag));

                if (tagLists.Count() > 1)
                {
                    return tagLists.Aggregate((x, y) => x.Intersect(y))
                               .OrderBy(x => x.Keyword)
                               .ToList();
                }
                else if (tagLists.Count() == 1)
                {
                    return tagLists.FirstOrDefault().ToList();
                }
            }
            catch (Exception ex)
            {
                Logging.Log($"Unable to get common tags: {ex}");
            }
        }

        return new Tag[0];
    }

    protected override async Task OnInitializedAsync()
    {
        if (TrackSelection)
        {
            // TODO: Dispose
            SelectionService.Instance.OnSelectionChanged += SelectionChanged;
            MetaDataService.Instance.OnFavouritesChanged += FavouritesChanged;
            SelectionChanged();
        }
        else
        {
            theImageTags = await LoadImageTagsAsync();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        navContext.OnChange += NavigationChanged;
    }

    protected void NavigationChanged(Image image)
    {
        var images = new Image[0];

        if (image != null)
            images = new[] { image };

        CurrentImages = images;

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    public void Dispose()
    {
        SelectionService.Instance.OnSelectionChanged -= SelectionChanged;
        MetaDataService.Instance.OnFavouritesChanged -= FavouritesChanged;
        navContext.OnChange += NavigationChanged;
    }

    protected void SelectionChanged()
    {
        this.CurrentImages = SelectionService.Instance.Selection.ToArray();

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    protected void FavouritesChanged()
    {
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        theImageTags = await LoadImageTagsAsync();
        StateHasChanged();
    }

    void ShowContextMenu(MouseEventArgs args, Tag tag)
    {
        contextMenuService.Open(args,
        new List<ContextMenuItem>() {
                new ContextMenuItem(){ Text = "View Tag", Value = 0 }
        }, (args) =>
        {
            contextMenuService.Close();
            switch (args.Value)
            {
                case 0: NavigationManager.NavigateTo("/tag/" + tag.Keyword); break;
            }
        });
    }
}
