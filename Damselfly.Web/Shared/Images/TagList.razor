@using System.Linq
@using Damselfly.Web.Data
@using Damselfly.Core.Services
@using Blazored.Typeahead

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService iptcService
@inject IndexingService indexService
@inject NavigationService navContext
@inject NavigationManager NavigationManager
@inject ContextMenuService contextMenuService;
@implements IDisposable

<div class="damselfly-taglist">
    @if (false)
    {
        <div class="InputAddOn">
            <div class="InputAddOn-item" title="Add Tags/Keywords"><i class="fa fa-tag" /></div>
            <input placeholder="Add a keyword" disabled="@IsDisabled" class="InputAddOn-field tagEditor"
                   @bind-value="NewTag" @bind-value:event="oninput" @onkeyup="ProcessTagEnter" />
            <button class="InputAddOn-item" title="Save Tags" @onclick="@(() => AddTags())"><i class="fa fa-plus-circle" /></button>
        </div>
    }
    <div class="InputAddOn">
        <div class="InputAddOn-item" title="Add Tags/Keywords"><i class="fa fa-tag" /></div>
        <BlazoredTypeahead disabled="@IsDisabled" class="InputAddOn-field" SearchMethod="SearchTags" EnableDropDown="false"
                           placeholder="Add a keyword" Debounce="300"
                           @bind-Value="@TypeAheadTag">
            <SelectedTemplate>
                @{
                    CreateNewTag(context);
                }
            </SelectedTemplate>
            <ResultTemplate>
                @context
            </ResultTemplate>
            <NotFoundTemplate>
                @tagSearchText
            </NotFoundTemplate>
        </BlazoredTypeahead>
    </div>

    <div class="damselfly-keywordlist">
        @if (CurrentImages != null && CurrentImages.Any())
        {
            @foreach (var tag in theImageTags)
            {
                <div class="damselfly-keyword" @oncontextmenu=@(args => ShowContextMenu(args, tag)) @oncontextmenu:preventDefault="true">
                    <div class="damselfly-keywordtext">@tag</div>
                    <div class="damselfly-deletetag" title="Remove Tag" @onclick="@(() => DeleteTag(tag))"><i class="fa fa-times-circle" /></div>
                </div>
            }
        }
        else
        {
            <div>No Keywords</div>
        }
    </div>
</div>

@code {
    public string TypeAheadTag { get; set; }
    private string tagSearchText { get; set; }

    [Parameter]
    public Image[] CurrentImages { get; set; }

    [Parameter]
    public bool TrackSelection { get; set; }

    public string NewTag { get; set; }
    private IList<string> theImageTags { get; set; }

    public bool IsDisabled { get { return CurrentImages == null || !CurrentImages.Any(); } }

    private async Task<IList<string>> LoadImageTagsAsync()
    {
        return await Task.FromResult(GetImageTags()
                                        .Select(x => x.Keyword)
                                        .OrderBy(x => x)
                                        .ToList());
    }

    private void CreateNewTag(string tagToAdd)
    {
        Logging.Log($"Creating tag for {tagToAdd}...");
        var addedTags = new List<string> { tagToAdd };
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, addedTags, null); });
        TypeAheadTag = null;
        StateHasChanged();
    }

    private void DeleteTag(string tag)
    {
        Logging.Log($"Tag {tag} removed");

        // TODO: Fix this async mess
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, null, new List<string> { tag }); });

        // Now store the state
        theImageTags.Remove(tag);

        StateHasChanged();
    }

    private IList<Tag> GetImageTags()
    {
        if (CurrentImages != null)
        {
            try
            {
                using var db = new ImageContext();

                // Enrich all the images with their with their tags
                foreach (var img in CurrentImages)
                    db.LoadTags(img);

                var tagLists = CurrentImages.Select(x => x.ImageTags.Select(t => t.Tag));

                if (tagLists.Count() > 1)
                {
                    return tagLists.Aggregate((x, y) => x.Intersect(y))
                               .OrderBy(x => x.Keyword)
                               .ToList();
                }
                else if (tagLists.Count() == 1)
                {
                    return tagLists.FirstOrDefault().ToList();
                }
            }
            catch (Exception ex)
            {
                Logging.Log($"Unable to get common tags: {ex}");
            }
        }

        return new Tag[0];
    }

    protected override async Task OnInitializedAsync()
    {
        if (TrackSelection)
        {
            // TODO: Dispose
            SelectionService.Instance.OnSelectionChanged += SelectionChanged;
            SelectionChanged();
        }
        else
        {
            theImageTags = await LoadImageTagsAsync();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        navContext.OnChange += NavigationChanged;
    }

    protected void NavigationChanged(Image image)
    {
        var images = new Image[0];

        if (image != null)
            images = new[] { image };

        CurrentImages = images;

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    public void Dispose()
    {
        SelectionService.Instance.OnSelectionChanged -= SelectionChanged;
        navContext.OnChange += NavigationChanged;
    }

    protected void SelectionChanged()
    {
        this.CurrentImages = SelectionService.Instance.Selection.ToArray();

        InvokeAsync(() => { _ = OnParametersSetAsync(); });
    }

    protected override async Task OnParametersSetAsync()
    {
        theImageTags = await LoadImageTagsAsync();
        StateHasChanged();
    }

    // BlazorContextMenu
    //void OnClick(ItemClickEventArgs e)
    //{
    //    Logging.Log($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    //}

    private void ProcessTagEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            Logging.Log("Saving new tag: " + NewTag);

            AddTags();
        }
    }

    private void AddTags()
    {
        // If multiple tags have been added, split them and add individually.
        var addedTags = NewTag.Split(',').Select(x => x.Trim()).ToList();

        // TODO: Fix this async mess
        InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, addedTags, null); });

        NewTag = string.Empty;
        StateHasChanged();
    }


    void ShowContextMenu(MouseEventArgs args, string tag)
    {
        contextMenuService.Open(args,
        new List<ContextMenuItem>() {
                new ContextMenuItem(){ Text = "View Tag", Value = 0 }
        }, (args) =>
    {
        switch (args.Value)
        {
            case 0: NavigationManager.NavigateTo("/tag/" + tag); break;
        }
        contextMenuService.Close();
    });
    }

    private async Task<IEnumerable<string>> SearchTags(string searchText)
    {
        tagSearchText = searchText;

        var searchList = new List<string>();

        if (searchText.Length > 1)
            searchList.Add(searchText);

        var results = await Task.FromResult(indexService.CachedTags
                                .Where(x => x.Keyword.StartsWith(searchText, StringComparison.OrdinalIgnoreCase))
                                .OrderBy(t => t.Keyword)
                                .Select(t => t.Keyword)
                                .ToList());
        return searchList.Union(results, StringComparer.OrdinalIgnoreCase);
    }
}
