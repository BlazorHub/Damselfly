@using System.Linq
@using Damselfly.Web.Data
@using Damselfly.Core.Services

@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService iptcService
@inject IndexingService indexService

@if (CurrentImages != null && CurrentImages.Any())
{
<div class="damselfly-taglist">
    <div class="InputAddOn">
        <div class="InputAddOn-item" title="Add Tags/Keywords"><i class="fa fa-tag" /></div>
        <input placeholder="Add a keyword" class="InputAddOn-field tagEditor" @bind-value="NewTag" @bind-value:event="oninput" @onkeyup="ProcessTagEnter" />
        <button class="InputAddOn-item" title="Save Tags" @onclick="@(() => AddTags())"><i class="fa fa-plus-circle" /></button>
    </div>

    <div class="damselfly-keywordlist">
        @foreach (var tag in theImageTags)
        {
            <div class="damselfly-keyword">
                <div class="damselfly-keywordtext">@tag</div>
                <div class="damselfly-deletetag" title="Remove Tag" @onclick="@(() => DeleteTag(tag))"><i class="fa fa-times-circle" /></div>
            </div>
        }
    </div>
</div>
    }

    @code {

            [Parameter]
            public Image[] CurrentImages { get; set; }

        public string NewTag { get; set; }
        public string AllTagsCSV { get; set; }
        private IList<string> theImageTags { get; set; }

        private async Task<IList<string>> LoadImageTagsAsync()
        {
            return await Task.FromResult( GetImageTags().Select( x => x.Keyword ).ToList() );
        }

        private void DeleteTag(string tag)
        {
            Logging.Log($"Tag {tag} removed");

            InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, null, new List<string> { tag } ); });

            // Now store the state
            theImageTags.Remove( tag );

            StateHasChanged();
        }

        private IList<Tag> GetImageTags()
        {
            if (CurrentImages != null)
            {
                try
                {
                    var tagLists = CurrentImages.Select(x => x.ImageTags.Select(t => t.Tag));

                    if (tagLists.Count() > 1)
                    {
                        return tagLists.Aggregate((x, y) => x.Intersect(y))
                                   .OrderBy(x => x.Keyword)
                                   .ToList();
                    }
                    else if (tagLists.Count() == 1)
                    {
                        return tagLists.FirstOrDefault().ToList();
                    }
                }
                catch (Exception ex)
                {
                    Logging.Log($"Unable to get common tags: {ex}");
                }
            }

            return new Tag[0];
        }

        protected override async Task OnInitializedAsync()
        {
            theImageTags = await LoadImageTagsAsync();
            AllTagsCSV = string.Join(", ", theImageTags);
            StateHasChanged();
        }

        protected override async Task OnParametersSetAsync()
        {
            theImageTags = await LoadImageTagsAsync();
            AllTagsCSV = string.Join(", ", theImageTags);
            StateHasChanged();
        }

        void OnClick(ItemClickEventArgs e)
        {
            Logging.Log($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
        }

        private void SaveTheTag()
        {
        }

        private void ProcessTagEnter(KeyboardEventArgs eventArgs)
        {
            if (eventArgs.Key == "Enter")        // fire on enter
            {
                Logging.Log("Saving new tag: " + NewTag);

                AddTags();
            }

        }

        private void AddTags()
        {
            // If multiple tags have been added, split them and add individually.
            var addedTags = NewTag.Split(',').Select(x => x.Trim()).ToList();

            InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, addedTags, null); });

            NewTag = string.Empty;
        }

        private void ProcessTagEnterAll(KeyboardEventArgs eventArgs)
        {
            if (eventArgs.Key == "Enter")        // fire on enter
            {
                Logging.Log("Saving tags: " + string.Join(", ", AllTagsCSV));

                var updatedTags = AllTagsCSV.Split(',').Select( x => x.Trim() ).ToList();

                // Now calculate the delta
                var newTags = updatedTags.Except(theImageTags).ToList();
                var removedTags = theImageTags.Except( updatedTags ).ToList();

                InvokeAsync(() => { _ = iptcService.UpdateTagsAsync(CurrentImages, newTags, removedTags); });

                // Now store the state
                theImageTags = updatedTags;

                // Hack until Blazor supports conditional preventDefault:
                // https://github.com/dotnet/aspnetcore/issues/14517#issuecomment-559184498
                AllTagsCSV = AllTagsCSV.Replace("\n", "");
                StateHasChanged();
            }
        }

        private async Task<IEnumerable<Tag>> SearchTags(string searchText)
        {
            using var db = new ImageContext();

            return await Task.FromResult(indexService.CachedTags.Where(x => x.Keyword.StartsWith(searchText)));
        }
    }
