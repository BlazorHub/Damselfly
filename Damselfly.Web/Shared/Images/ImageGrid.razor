
@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService keywordService
@inject IJSRuntime JsRuntime
@inject SearchService searchService
@implements IDisposable
@inherits ImageGridBase

@using Damselfly.Web.Shared
@using Damselfly.Web.Shared.Images
@using Damselfly.Core.ImageProcessing

<div class="damselfly-imagegrid" id="scroll-area">
    @if (!gridImages.Any())
    {
        <div class="damselfly-searchmsg">
            @if (endOfImages)
            {
                <span>@NoResultsMessage</span>
            }
            else
            {
                <span> Loading images...</span>
            }
        </div>
    }
    else
    {
        @for(Int16 i = 0; i < gridImages.Count; i++ )
        {
            var info = new SelectionInfo { image = gridImages[i], index = i };

            if (ShowDateSeparators)
            {
                <GridSeparator CurrentImage="@info.image" PrevImage="@prevImage" />
            }
            <div class="damselfly-gridimage @WrapStyle" @onclick="@(e => { ToggleSelected( e, info ); })">
                <GridImage CurrentImage=@info.image NavContext=@NavigationContexts.Search ThumbnailSize=@CurrentThumbSize />
            </div>

            { prevImage = info.image; }

            if (!endOfImages && i == (gridImages.Count() - scrollTriggerImages))
            {
                <div class="damselfly-moreimages" id="list-end"/>
            }
        }
    }
</div>

<div class="damselfly-imagetools">
    <div class="damselfly-browsetool">
        @foreach (var choice in new[] { ThumbSize.Small, ThumbSize.Medium, ThumbSize.Large })
        {
            <label class="damselfly-browsetoollabel">
                <input name="thumbSize" type="radio"
                       value="@choice"
                       checked="@(CurrentThumbSize == choice)"
                       @onchange="@(() => { ChangeThumbSize( choice ); })" />
                @choice.ToString()
            </label>
        }
    </div>
    <div class="damselfly-browsetool">
        <label class="damselfly-browsetoollabel" for="DateSep">Group by Date</label>
        <input id="DateSep" type="checkbox" @bind="@ShowDateSeparators">
    </div>
</div>

@code {
    const int scrollTriggerImages = 30;
    const int imagesPerPage = 250;
    private Image prevImage = null;
    private bool showDateSeparators = ConfigService.Instance.GetBool( "DateSeparators", false );

    bool IsLoading { get; set; } = false;
    bool endOfImages = false;
    public bool ShowDateSeparators {  get { return showDateSeparators; } set { SetDateSeparatorState(value); } }
    ThumbSize CurrentThumbSize = ConfigService.Instance.Get<ThumbSize>("ThumbSize", ThumbSize.Small);

    private EventConflator conflator = new EventConflator(2000);


    private void StoreImage( Image image )
    {
        // Todo - save an image to local storage
    }

    private void SetDateSeparatorState( bool showSeparator )
    {
        showDateSeparators = showSeparator;

        ConfigService.Instance.Set("DateSeparators", showSeparator.ToString() );

        StateHasChanged();
    }

    string WrapStyle { get; set; } = "wrapping-table-small";

    protected void ChangeThumbSize(ThumbSize newSize)
    {
        CurrentThumbSize = newSize;

        switch (newSize)
        {
            case ThumbSize.Medium: WrapStyle = "wrapping-table-medium"; break;
            case ThumbSize.Large: WrapStyle = "wrapping-table-large"; break;
            case ThumbSize.ExtraLarge: WrapStyle = "wrapping-table-x-large"; break;
            case ThumbSize.Small: WrapStyle = "wrapping-table-small"; break;
            default: WrapStyle = "wrapping-table-small"; break;
        }

        ConfigService.Instance.Set("ThumbSize", newSize.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int initialLoadCount, scrollPos;

            if ( !int.TryParse(ConfigService.Instance.Get("LoadedImages"), out initialLoadCount) || initialLoadCount < imagesPerPage)
                initialLoadCount = imagesPerPage;

            if ( !int.TryParse(ConfigService.Instance.Get("ImageScrollTop"), out scrollPos))
                scrollPos = 0;

            searchService.OnChange += SearchQueryChanged;
            await LoadData( initialLoadCount );
            await InitJsListenerAsync( scrollPos );
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= SearchQueryChanged;
    }

    public string NoResultsMessage
    {
        get
        {
            if (searchService.Folder != null)
            {
                return $"No images were found in folder '{searchService.Folder.Name}' that match the current filter.";
            }

            return "No images were found that match the current filter.";
        }
    }

    protected void SearchQueryChanged()
    {
        SelectionService.Instance.ClearSelection();
        gridImages.Clear();
        endOfImages = false;

        _ = LoadData(imagesPerPage);
    }

    protected async Task InitJsListenerAsync( int initialScrollPos )
    {
        await JsRuntime.InvokeVoidAsync("InfiniteScroll.Init", "scroll-area", "list-end", DotNetObjectReference.Create(this), initialScrollPos);
    }

    private void SaveScrollState( int scrollTop )
    {
        ConfigService.Instance.Set("ImageScrollTop", scrollTop.ToString() );
        ConfigService.Instance.Set("LoadedImages", gridImages.Count.ToString());
    }

    [JSInvokable]
    // Debugging method to help us differentiate between JS calls and other data loads
    public void HandleScroll( int scrollTop )
    {
        conflator.HandleEvent( (x) => { SaveScrollState( scrollTop ); } );
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public async Task LoadMoreData()
    {
        await LoadData(imagesPerPage);
    }

    public async Task LoadData( int imagesToLoad )
    {
        if (!IsLoading)
        {
            IsLoading = true;

            ChangeThumbSize(CurrentThumbSize);
            var newImages = await searchService.GetQueryImagesAsync(gridImages.Count(), imagesToLoad);

            if (newImages.Any())
            {
                gridImages.AddRange(newImages);
            }

            if (newImages.Count() < imagesToLoad)
                endOfImages = true;

            IsLoading = false;

            await InvokeAsync(StateHasChanged);
        }
    }
}
