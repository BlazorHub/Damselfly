
@using Damselfly.Core.Services
@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService keywordService
@inject IJSRuntime JsRuntime
@inject SearchService searchService
@implements IDisposable
@inherits ImageGridBase

@using Damselfly.Web.Shared
@using Damselfly.Web.Shared.Images
@using Damselfly.Core.ImageProcessing

<div class="damselfly-imagegrid" id="scroll-area">
    @if (!gridImages.Any())
    {
        <div class="damselfly-searchmsg">
            @if (endOfImages)
            {
                <span>@NoResultsMessage</span>
            }
            else
            {
                <span> Loading images...</span>
            }
        </div>
    }
    else
    {
        int allImages = 0;
        foreach (var grouping in GroupedImages)
        {
            if (!string.IsNullOrEmpty(grouping.Key))
            {
                <div class="damselfly-imageseparator">
                    @grouping.Key
                    <button @onclick="() => { AddGroupToBasket(grouping); }" class="btn btn-primary">
                        <i class="fas fa-shopping-basket" />
                        &nbsp;Add
                    </button>
                    <button @onclick="() => { SelectGroup(grouping); }" class="btn btn-primary">
                        <i class="fas fa-shopping-basket" />
                        &nbsp;Select
                    </button>
                </div>
            }

            foreach( var image in grouping.Images )
            {
                var info = new SelectionInfo { image = image, index = allImages++ };

                <div class="damselfly-gridimage @WrapStyle" @onclick="@(e => { ToggleSelected(e, info); })">
                    <GridImage CurrentImage=@info.image NavContext=@NavigationContexts.Search ThumbnailSize=@CurrentThumbSize />
                </div>

                if (!endOfImages && allImages == (gridImages.Count() - scrollTriggerImages))
                {
                    <div class="damselfly-moreimages" id="list-end" />
                }
            }
        }
    }
</div>

<div class="damselfly-imagetools">
    <div class="damselfly-browsetool">
        @foreach (var choice in new[] { ThumbSize.Small, ThumbSize.Medium, ThumbSize.Large })
        {
            <label class="damselfly-browsetoollabel">
                <input name="thumbSize" type="radio"
                       value="@choice"
                       checked="@(CurrentThumbSize == choice)"
                       @onchange="@(() => { ChangeThumbSize( choice ); })" />
                @choice.ToString()
            </label>
        }
    </div>
    <div class="damselfly-browsetool">
        <label class="damselfly-browsetoollabel">
            Group By:
            @foreach (var choice in new[] { SearchService.GroupingType.None, SearchService.GroupingType.Date, SearchService.GroupingType.Folder })
            {
                <label class="damselfly-browsetoollabel">
                    <input name="thumbSize" type="radio"
                           value="@choice"
                           checked="@(CurrentGroupType == choice)"
                           @onchange="@(() => { ChangeGroupType( choice ); })" />
                    @choice.ToString()
                </label>
            }
        </label>
    </div>
</div>

@code {
    const int scrollTriggerImages = 30;
    const int imagesPerPage = 250;
    private bool showDateSeparators = ConfigService.Instance.GetBool( "DateSeparators", false );

    bool IsLoading { get; set; } = false;
    bool endOfImages = false;
    private EventConflator conflator = new EventConflator(2000);

    ThumbSize CurrentThumbSize = ConfigService.Instance.Get<ThumbSize>("ThumbSize", ThumbSize.Small);
    SearchService.GroupingType CurrentGroupType = ConfigService.Instance.Get<SearchService.GroupingType>("GridGrouping", SearchService.GroupingType.None);

    private void StoreImage( Image image )
    {
        // Todo - save an image to local storage
    }

    void AddGroupToBasket(ImageGrouping grouping)
    {
        BasketService.Instance.SetBasketState(grouping.Images, true);
        StatusService.Instance.StatusText = $"{grouping.Images.Count()} images added to the basket";
    }

    void SelectGroup(ImageGrouping grouping)
    {
        SelectionService.Instance.SelectImages(grouping.Images);
        StatusService.Instance.StatusText = $"{grouping.Images.Count()} images added to the basket";
    }

    private List<ImageGrouping> GroupedImages
    {
        get
        {
            // TODO: Order by
            if (CurrentGroupType == SearchService.GroupingType.Folder)
            {
                return gridImages.GroupBy(x => x.Folder)
                            .OrderBy(x => x.Key.Path)
                            .Select(x => new ImageGrouping { Key = x.Key.Path, Images = x.ToList() })
                            .ToList();
            }
            else if (CurrentGroupType == SearchService.GroupingType.Date)
            {
                return gridImages.GroupBy(x => x.SortDate.Date)
                            .OrderByDescending( x => x.Key )
                            .Select(x => new ImageGrouping { Key = x.Key.ToString("dddd, dd MMMM yyyy"), Images = x.ToList() })
                            .ToList();
            }

            return new List<ImageGrouping> { new ImageGrouping { Key = null, Images = gridImages } };
        }

    }

    private void ChangeGroupType(SearchService.GroupingType newType )
    {
        CurrentGroupType = newType;

        ConfigService.Instance.Set("GridGrouping", newType.ToString() );
    }

    string WrapStyle { get; set; } = "wrapping-table-small";

    protected void ChangeThumbSize(ThumbSize newSize)
    {
        CurrentThumbSize = newSize;

        switch (newSize)
        {
            case ThumbSize.Medium: WrapStyle = "wrapping-table-medium"; break;
            case ThumbSize.Large: WrapStyle = "wrapping-table-large"; break;
            case ThumbSize.ExtraLarge: WrapStyle = "wrapping-table-x-large"; break;
            case ThumbSize.Small: WrapStyle = "wrapping-table-small"; break;
            default: WrapStyle = "wrapping-table-small"; break;
        }

        ConfigService.Instance.Set("ThumbSize", newSize.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int initialLoadCount, scrollPos;

            if ( !int.TryParse(ConfigService.Instance.Get("LoadedImages"), out initialLoadCount) || initialLoadCount < imagesPerPage)
                initialLoadCount = imagesPerPage;

            if ( !int.TryParse(ConfigService.Instance.Get("ImageScrollTop"), out scrollPos))
                scrollPos = 0;

            searchService.OnChange += SearchQueryChanged;
            await LoadData( initialLoadCount );
            await InitJsListenerAsync( scrollPos );
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= SearchQueryChanged;
    }

    public string NoResultsMessage
    {
        get
        {
            if (searchService.Folder != null)
            {
                return $"No images were found in folder '{searchService.Folder.Name}' that match the current filter.";
            }

            return "No images were found that match the current filter.";
        }
    }

    protected void SearchQueryChanged()
    {
        SelectionService.Instance.ClearSelection();
        gridImages.Clear();
        endOfImages = false;

        _ = LoadData(imagesPerPage);
    }

    protected async Task InitJsListenerAsync( int initialScrollPos )
    {
        await JsRuntime.InvokeVoidAsync("InfiniteScroll.Init", "scroll-area", "list-end", DotNetObjectReference.Create(this), initialScrollPos);
    }

    private void SaveScrollState( int scrollTop )
    {
        ConfigService.Instance.Set("ImageScrollTop", scrollTop.ToString() );
        ConfigService.Instance.Set("LoadedImages", gridImages.Count.ToString());
    }

    [JSInvokable]
    // Debugging method to help us differentiate between JS calls and other data loads
    public void HandleScroll( int scrollTop )
    {
        conflator.HandleEvent( (x) => { SaveScrollState( scrollTop ); } );
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public async Task LoadMoreData()
    {
        await LoadData(imagesPerPage);
    }

    public async Task LoadData( int imagesToLoad )
    {
        if (!IsLoading)
        {
            IsLoading = true;

            ChangeThumbSize(CurrentThumbSize);
            var newImages = await searchService.GetQueryImagesAsync(gridImages.Count(), imagesToLoad, CurrentGroupType);

            if (newImages.Any())
            {
                gridImages.AddRange(newImages);
            }

            if (newImages.Count() < imagesToLoad)
                endOfImages = true;

            IsLoading = false;

            await InvokeAsync(StateHasChanged);
        }
    }
}
