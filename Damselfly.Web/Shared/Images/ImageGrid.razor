
@using Damselfly.Core.Models
@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService keywordService
@inject IJSRuntime JsRuntime
@inject SearchService searchService
@implements IDisposable
@inherits ImageGridBase

@using Damselfly.Web.Shared
@using Damselfly.Web.Shared.Images
@using Damselfly.Core.ImageProcessing

<LocalFileExporter @ref="FileExporter" />
<div class="damselfly-imagegrid" id="scroll-area">
    @if (!gridImages.Any())
    {
        <div class="damselfly-searchmsg">
            @if (endOfImages)
            {
                <span>@NoResultsMessage</span>
            }
            else
            {
                <span> Loading images...</span>
            }
        </div>
    }
    else
    {
        int allImages = 0;
        foreach (var grouping in GroupedImages)
        {
            if (!string.IsNullOrEmpty(grouping.Key))
            {
                <div class="damselfly-imageseparator">
                    <div class="damselfly-imageseparatortitle">
                        @grouping.Key
                    </div>
                    <div class="damselfly-imageseparatorbuttons">
                        <button @onclick="() => { AddGroupToBasket(grouping); }" class="btn btn-primary damselfly-imageseparatorbutton">
                            <i class="fas fa-shopping-basket" />
                            &nbsp;Add
                        </button>
                        <button @onclick="() => { RemoveGroupFromBasket(grouping); }" class="btn btn-primary damselfly-imageseparatorbutton">
                            <i class="fas fa-shopping-basket" />
                            &nbsp;Remove
                        </button>
                        <button @onclick="() => { SelectGroup(grouping); }" class="btn btn-primary damselfly-imageseparatorbutton">
                            &nbsp;Select
                        </button>
                        <button @onclick="() => { DeselectGroup(grouping); }" class="btn btn-primary damselfly-imageseparatorbutton">
                            &nbsp;De-select
                        </button>
                        @if (FileExporter != null && FileExporter.IsDesktopHosted)
                        {
                            <button @onclick="async () => { await FileExporter.ExportImagesToLocalFilesystem(grouping.Images); }" class="btn btn-primary">
                                <i class="fas fa-shopping-basket" />
                                &nbsp;Save Locally
                            </button>
                        }
                    </div>
                </div>
            }

            foreach (var image in grouping.Images)
            {
                var info = new SelectionInfo { image = image, index = allImages++ };

                <div class="damselfly-gridimage @WrapStyle" @onclick="@(e => { ToggleSelected(e, info); })">
                    <GridImage CurrentImage=@info.image NavContext=@NavigationContexts.Search ThumbnailSize=@CurrentThumbSize />
                </div>

                if (!endOfImages && allImages == (gridImages.Count() - scrollTriggerImages))
                {
                    <div class="damselfly-moreimages" id="list-end" />
                }
            }
        }
    }
</div>

<div class="damselfly-imagetools">
    <div class="damselfly-browsetool">
        @foreach (var choice in new[] { ThumbSize.Small, ThumbSize.Medium, ThumbSize.Large })
        {
            <label class="damselfly-browsetoollabel">
                <input name="thumbSize" type="radio"
                       value="@choice"
                       checked="@(CurrentThumbSize == choice)"
                       @onchange="@(() => { ChangeThumbSize( choice ); })" />
                @choice.ToString()
            </label>
        }
    </div>
    <div class="damselfly-browsetool">
        <label class="damselfly-browsetoollabel">
            Group By:
            @foreach (var choice in new[] { SearchQuery.GroupingType.None, SearchQuery.GroupingType.Date, SearchQuery.GroupingType.Folder })
            {
                <label class="damselfly-browsetoollabel">
                    <input name="thumbSize" value="@choice" type="radio"
                           checked="@(SearchService.Instance.Grouping == choice)"
                           @onchange="@(() => { ChangeGroupType( choice ); })" />
                    @choice.ToString()
                </label>
            }
        </label>
    </div>
</div>

@code {
    private LocalFileExporter FileExporter;
    const int scrollTriggerImages = 30;
    const int imagesPerPage = 100;
    private bool showDateSeparators = ConfigService.Instance.GetBool("DateSeparators", false);

    bool IsLoading { get; set; } = false;
    bool endOfImages = false;
    private EventConflator conflator = new EventConflator(2000);

    ThumbSize CurrentThumbSize = ConfigService.Instance.Get<ThumbSize>("ThumbSize", ThumbSize.Small);

    private void StoreImage(Image image)
    {
        // Todo - save an image to local storage
    }

    void AddGroupToBasket(ImageGrouping grouping)
    {
        BasketService.Instance.SetBasketState(grouping.Images, true);
        StatusService.Instance.StatusText = $"{grouping.Images.Count()} images added to the basket";
    }

    void RemoveGroupFromBasket(ImageGrouping grouping)
    {
        BasketService.Instance.SetBasketState(grouping.Images, false);
        StatusService.Instance.StatusText = $"{grouping.Images.Count()} images removed from the basket";
    }

    void SelectGroup(ImageGrouping grouping)
    {
        SelectionService.Instance.SelectImages(grouping.Images);
    }

    void DeselectGroup(ImageGrouping grouping)
    {
        SelectionService.Instance.DeselectImages(grouping.Images);
    }

    private List<ImageGrouping> GroupedImages
    {
        get
        {
            // TODO: Order by
            if (SearchService.Instance.Grouping == SearchQuery.GroupingType.Folder)
            {
                return gridImages.GroupBy(x => x.Folder)
                            .OrderBy(x => x.Key.Path)
                            .Select(x => new ImageGrouping { Key = x.Key.Path, Images = x.ToList() })
                            .ToList();
            }
            else if (SearchService.Instance.Grouping == SearchQuery.GroupingType.Date)
            {
                return gridImages.GroupBy(x => x.SortDate.Date)
                            .OrderByDescending(x => x.Key)
                            .Select(x => new ImageGrouping { Key = x.Key.ToString("dddd, dd MMMM yyyy"), Images = x.ToList() })
                            .ToList();
            }

            return new List<ImageGrouping> { new ImageGrouping { Key = null, Images = gridImages } };
        }

    }

    private void ChangeGroupType(SearchQuery.GroupingType newType)
    {
        SearchService.Instance.Grouping = newType;
    }

    string WrapStyle { get; set; } = "wrapping-table-small";

    protected void ChangeThumbSize(ThumbSize newSize)
    {
        CurrentThumbSize = newSize;

        switch (newSize)
        {
            case ThumbSize.Medium: WrapStyle = "wrapping-table-medium"; break;
            case ThumbSize.Large: WrapStyle = "wrapping-table-large"; break;
            case ThumbSize.ExtraLarge: WrapStyle = "wrapping-table-x-large"; break;
            case ThumbSize.Small: WrapStyle = "wrapping-table-small"; break;
            default: WrapStyle = "wrapping-table-small"; break;
        }

        ConfigService.Instance.Set("ThumbSize", newSize.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FileExporter.OnChange += StateHasChanged;

            int initialLoadCount, scrollPos;

            if (!int.TryParse(ConfigService.Instance.Get("LoadedImages"), out initialLoadCount) || initialLoadCount < imagesPerPage)
                initialLoadCount = imagesPerPage;

            if (!int.TryParse(ConfigService.Instance.Get("ImageScrollTop"), out scrollPos))
                scrollPos = 0;

            searchService.OnChange += SearchQueryChanged;
            await LoadData(initialLoadCount);
            await InitJsListenerAsync(scrollPos);
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= SearchQueryChanged;
        FileExporter.OnChange -= StateHasChanged;

    }

    public string NoResultsMessage
    {
        get
        {
            if (searchService.Folder != null)
            {
                return $"No images were found in folder '{searchService.Folder.Name}' that match the current filter.";
            }

            return "No images were found that match the current filter.";
        }
    }

    protected void SearchQueryChanged()
    {
        SelectionService.Instance.ClearSelection();
        gridImages.Clear();
        endOfImages = false;

        _ = LoadData(imagesPerPage);
    }

    protected async Task InitJsListenerAsync(int initialScrollPos)
    {
        await JsRuntime.InvokeVoidAsync("InfiniteScroll.Init", "scroll-area", "list-end", DotNetObjectReference.Create(this), initialScrollPos);
    }

    private void SaveScrollState(int scrollTop)
    {
        ConfigService.Instance.Set("ImageScrollTop", scrollTop.ToString());
        ConfigService.Instance.Set("LoadedImages", gridImages.Count.ToString());
    }

    [JSInvokable]
    // Debugging method to help us differentiate between JS calls and other data loads
    public void HandleScroll(int scrollTop)
    {
        conflator.HandleEvent((x) => { SaveScrollState(scrollTop); });
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public async Task LoadMoreData()
    {
        await LoadData(imagesPerPage);
    }

    public async Task LoadData(int imagesToLoad)
    {
        if (!IsLoading)
        {
            IsLoading = true;

            ChangeThumbSize(CurrentThumbSize);
            var newImages = await searchService.GetQueryImagesAsync(gridImages.Count(), imagesToLoad);

            if (newImages.Any())
            {
                gridImages.AddRange(newImages);
            }

            if (newImages.Count() < imagesToLoad)
                endOfImages = true;

            IsLoading = false;

            await InvokeAsync(StateHasChanged);
        }
    }
}
