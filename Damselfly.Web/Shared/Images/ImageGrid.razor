
@inject ImageService imageService
@inject ThumbnailService thumbService
@inject MetaDataService keywordService
@inject IJSRuntime JsRuntime
@inject SearchService searchService
@implements IDisposable

@using Damselfly.Web.Shared
@using Damselfly.Web.Shared.Images
@using Damselfly.Core.ImageProcessing

<div class="damselfly-imagegrid" id="list-end">
    @if (!gridImages.Any())
    {
        <div class="damselfly-searchmsg">
            @if (endOfImages)
            {
                <span>@NoResultsMessage</span>
            }
            else
            {
                <span> Loading images...</span>
            }
        </div>
    }
    else
    {
        @foreach (var image in gridImages)
        {
            if (ShowDateSeparators)
            {
                <GridSeparator CurrentImage="@image" PrevImage="@prevImage"/>
            }
            <div class="damselfly-gridimage @WrapStyle" @onclick="@(e => { ToggleSelected( e, image ); })">
                <GridImage CurrentImage=@image NavContext=@NavigationContexts.Search ThumbnailSize=@CurrentThumbSize />
            </div>

            {  prevImage = image; }
        }

        @if (IsLoading && !endOfImages)
        {
            <Spinner />
        }
    }
</div>

<div class="damselfly-imagetools">
    <div class="damselfly-browsetool">
        @foreach (var choice in new[] { ThumbSize.Small, ThumbSize.Medium, ThumbSize.Large })
        {
            <label>
                <input name="thumbSize" type="radio"
                       value="@choice"
                       checked="@(CurrentThumbSize == choice)"
                       @onchange="@(() => { ChangeThumbSize( choice ); })" />
                @choice.ToString()
            </label>
        }
    </div>
    <div class="damselfly-browsetool">
        <label for="DateSep">Group by Date</label>
        <input id="DateSep" type="checkbox" @bind="@ShowDateSeparators">
    </div>
</div>

@code {
    const int imagesPerPage = 250;
    private Image prevImage = null;
    private bool showDateSeparators = ConfigService.Instance.GetBool( "DateSeparators", false );

    bool IsLoading { get; set; } = false;
    bool endOfImages = false;
        readonly List<Image> gridImages = new List<Image>();
    public bool ShowDateSeparators {  get { return showDateSeparators; } set { SetDateSeparatorState(value); } }
    ThumbSize CurrentThumbSize = ConfigService.Instance.Get<ThumbSize>("ThumbSize", ThumbSize.Small);

    private void StoreImage( Image image )
    {
        // Todo - save an image to local storage
    }

    private void SetDateSeparatorState( bool showSeparator )
    {
        showDateSeparators = showSeparator;

        ConfigService.Instance.Set("DateSeparators", showSeparator.ToString() );

        StateHasChanged();
    }

    string WrapStyle { get; set; } = "wrapping-table-small";

    protected void ChangeThumbSize(ThumbSize newSize)
    {
        CurrentThumbSize = newSize;

        switch (newSize)
        {
            case ThumbSize.Medium: WrapStyle = "wrapping-table-medium"; break;
            case ThumbSize.Large: WrapStyle = "wrapping-table-large"; break;
            case ThumbSize.ExtraLarge: WrapStyle = "wrapping-table-x-large"; break;
            case ThumbSize.Small: WrapStyle = "wrapping-table-small"; break;
            default: WrapStyle = "wrapping-table-small"; break;
        }

        ConfigService.Instance.Set("ThumbSize", newSize.ToString());
    }

    /// <summary>
    /// Manage the selection state for the grid images. 
    /// </summary>
    /// <param name="e"></param>
    /// <param name="image"></param>
    private Image prevSelection = null;

    private void ToggleSelected(MouseEventArgs e, Image image)
    {
        var watch = new Stopwatch("ToggleSelection");
        if (e.ShiftKey && prevSelection != null )
        {
            // Range selection. 
            var first = gridImages.FindIndex(x => x.ImageId == prevSelection.ImageId);
            var last = gridImages.FindIndex(x => x.ImageId == image.ImageId);

            if( first > last )
            {
                var temp = last;
                last = first;
                first = temp;
            }

            Logging.Log($"Selecting images {first} ({prevSelection.FileName}) to {last} ({image.FileName})");

            for ( int i = first; i <= last; i++ )
            {
                var img = gridImages[i];
                SelectionService.Instance.SelectImage(img);
            }
        }
        else
        {
            if (e.MetaKey)
            {
                // Apple key was pressed - toggle the selection
                SelectionService.Instance.ToggleSelection( new List<Image> { image });
            }
            else
            {
                // No keys pressed. Select if unselected, or deselect if selected - but
                // clear any other selection at the same time. Store the last selection
                // as it could be the beginning of a range selection
                bool wasPreviouslySelected = SelectionService.Instance.IsSelected(image);
                SelectionService.Instance.ClearSelection();
                prevSelection = null;

                if (!wasPreviouslySelected)
                {
                    SelectionService.Instance.SelectImage(image);
                    prevSelection = image;
                }
            }
        }

        watch.Stop();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            searchService.OnChange += SearchQueryChanged;
            await LoadData();
            await InitJsListenerAsync();
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= SearchQueryChanged;
    }

    public string NoResultsMessage
    {
        get
        {
            if (searchService.Folder != null)
            {
                return $"No images were found in folder '{searchService.Folder.Name}' that match the current filter.";
            }

            return "No images were found that match the current filter.";
        }
    }

    protected void SearchQueryChanged()
    {
        SelectionService.Instance.ClearSelection();
        gridImages.Clear();
        endOfImages = false;

        _ = LoadData();
    }



    protected async Task InitJsListenerAsync()
    {
        await JsRuntime.InvokeVoidAsync("InfiniteScroll.Init", "list-end", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    // Debugging assistant to help us differentiate between JS calls and other data loads
    public async Task LoadMore()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        if (!IsLoading)
        {
            IsLoading = true;

            ChangeThumbSize(CurrentThumbSize);
            var newImages = await searchService.GetQueryImagesAsync(gridImages.Count(), imagesPerPage);

            if (newImages.Any())
            {
                gridImages.AddRange(newImages);
            }

            if (newImages.Count() < imagesPerPage)
                endOfImages = true;

            await InvokeAsync( StateHasChanged );
        }

        IsLoading = false;
    }
}
