
@using System.ComponentModel.DataAnnotations
@using Damselfly.Core.Interfaces
@using Humanizer

@inject BasketService basketService
@inject UserService userService
@inject UserStatusService userStatusService
@inject ConfigService configService
@inject IndexingService indexingService
@inject SearchService searchService

@implements IDisposable

<div class="damselfly-dialogrow">
    <div class="damselfly-dialogctrl">
        <MudSelect T="SearchQuery.FaceSearchType" Label="People Filters" HelperText="Look for files with/without faces" @bind-Value="searchService.FaceSearch" Variant="Variant.Filled">
            @foreach (var choice in faceTypes)
            {
                <MudSelectItem Value="@choice">
                    @choice.ToString().Humanize()
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudSelect T="SearchQuery.OrientationType" Label="Orientation" HelperText="Filter landscape/portrait images" @bind-Value="searchService.Orientation" Variant="Variant.Filled">
            @foreach (var choice in orientationTypes)
            {
                <MudSelectItem Value="@choice">
                    @choice.ToString().Humanize()
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudSelect T="int" Label="Camera" HelperText="Camera Model to filter" @bind-Value="searchService.CameraId" Variant="Variant.Filled">
            <MudSelectItem T="int" Value="-1">Any Camera</MudSelectItem>
            @foreach (var cam in indexingService.Cameras)
            {
                <MudSelectItem T="int" Value="@cam.CameraId">
                    @cam.Make @cam.Model
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudSelect T="int" Label="Lens" HelperText="Lens Model to filter" @bind-Value="searchService.LensId" Variant="Variant.Filled">
            <MudSelectItem T="int" Value="-1">Any Lens</MudSelectItem>
            @foreach (var lens in indexingService.Lenses)
            {
                <MudSelectItem T="int" Value="@lens.LensId">
                    @lens.Make @lens.Model
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudSelect T="int?" Label="Max File Size" HelperText="Max File Size" @bind-Value="searchService.MaxSizeKB" Variant="Variant.Filled">
            <MudSelectItem T="int?" Value="@null">Any Size</MudSelectItem>
            @foreach (var choice in fileSizeChoices)
            {
                <MudSelectItem T="int?" Value="@choice.Value">
                    @choice.Key
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudSelect T="int?" Label="Min File Size" HelperText="Min File Size" @bind-Value="searchService.MinSizeKB" Variant="Variant.Filled">
            <MudSelectItem T="int?" Value="@null">Any Size</MudSelectItem>
            @foreach (var choice in fileSizeChoices)
            {
                <MudSelectItem T="int?" Value="@choice.Value">
                    @choice.Key
                </MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="damselfly-dialogctrl">
        <MudCheckBox @bind-Checked="@searchService.TagsOnly" Label="Exclude filenames/folders" />
    </div>
    <div class="damselfly-dialogctrl">
        <MudCheckBox @bind-Checked="@searchService.IncludeAITags" Label="Include AI tags" />
    </div>
    <div class="damselfly-dialogctrl">
        <MudCheckBox @bind-Checked="@searchService.UntaggedImages" Label="Only show images without keyword tags" />
    </div>
</div>

@code {
    private List<SearchQuery.FaceSearchType> faceTypes = EnumerableExtensions.GetEnumList<SearchQuery.FaceSearchType>();
    private List<SearchQuery.OrientationType> orientationTypes = EnumerableExtensions.GetEnumList<SearchQuery.OrientationType>();

    private List<KeyValuePair<string, int>> fileSizeChoices = new List<KeyValuePair<string, int>> {
        new KeyValuePair<string, int>( "1KB", 1 ),
        new KeyValuePair<string, int>( "50KB", 50 ),
        new KeyValuePair<string, int>( "500KB", 500 ),
        new KeyValuePair<string, int>( "1MB", 1024 ),
        new KeyValuePair<string, int>( "5MB", 5 * 1024 ),
        new KeyValuePair<string, int>( "10MB", 10 * 1024 ),
        new KeyValuePair<string, int>( "50MB", 50 * 1024 ),
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if( firstRender )
        {
            searchService.OnChange += OnSearchChanged;
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= OnSearchChanged;
    }

    private void OnSearchChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}